import React, { useState, useEffect, useCallback } from 'react';
import supabase from '../supabaseClient';
import './MainPartners.css';
import FitnessManagement from './FitnessManagement';
import EquipmentManagement from './EquipmentManagement';

const MainPartners = ({ user, onLogout, onNavigateToHome }) => {
  const [partnerData, setPartnerData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [activeSection, setActiveSection] = useState('dashboard');
  
  // Cache states ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î re-loading
  const [dataLoaded, setDataLoaded] = useState(false);
  const [lastFetchTime, setLastFetchTime] = useState(null);
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö components ‡πÉ‡∏´‡∏°‡πà
  const [fitnessData, setFitnessData] = useState(null);
  const [equipmentList, setEquipmentList] = useState([]);

  // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ onLogout ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  console.log('MainPartners received onLogout:', typeof onLogout);

  // Callback functions for child components
  const handleFitnessUpdate = useCallback((updatedFitnessData) => {
    setFitnessData(updatedFitnessData);
    console.log('üîÑ Fitness data updated:', updatedFitnessData);
  }, []);

  const handleEquipmentUpdate = useCallback((updatedEquipmentList) => {
    setEquipmentList(updatedEquipmentList);
    console.log('üîÑ Equipment list updated:', updatedEquipmentList);
  }, []);

  useEffect(() => {
    if (user?.id && !dataLoaded) {
      fetchPartnerData();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user?.id, dataLoaded]);
  
  // Cache refresh every 5 minutes
  useEffect(() => {
    if (dataLoaded && lastFetchTime) {
      const refreshInterval = setInterval(() => {
        const now = Date.now();
        const timeDiff = now - lastFetchTime;
        
        // Refresh data every 5 minutes (300000ms) only if user is active
        if (timeDiff > 300000 && document.visibilityState === 'visible') {
          console.log('üîÑ Refreshing data after 5 minutes');
          setDataLoaded(false);
        }
      }, 60000); // Check every minute
      
      return () => clearInterval(refreshInterval);
    }
  }, [dataLoaded, lastFetchTime]);



  const handleLogoutClick = () => {
    console.log('Logout button clicked in MainPartners');
    if (typeof onLogout === 'function') {
      console.log('Calling onLogout function...');
      onLogout();
    } else {
      console.error('onLogout is not a function:', onLogout);
    }
  };

  const fetchPartnerData = async () => {
    try {
      setLoading(true);
      console.log('üìä Fetching partner data...');
      
      const { data, error } = await supabase
        .from('tbl_owner')
        .select('*')
        .eq('auth_user_id', user.id)
        .single();

      if (error) {
        console.error('Error fetching partner data:', error);
      } else {
        setPartnerData(data);
        setDataLoaded(true);
        setLastFetchTime(Date.now());
        console.log('‚úÖ Partner data loaded and cached');
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î
        if (!fitnessDataLoaded) {
          loadExistingFitnessData(data);
        }
      }
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  const loadExistingFitnessData = async (partnerInfo = null) => {
    try {
      const currentPartner = partnerInfo || partnerData;
      if (!currentPartner?.owner_name) return;
      
      console.log('üìä Loading existing fitness data...');
      
      // ‡πÉ‡∏ä‡πâ fit_user ‡πÅ‡∏ó‡∏ô fit_owner_id ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ fit_owner_id ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      const { data, error } = await supabase
        .from('tbl_fitness')
        .select('*')
        .eq('fit_user', currentPartner.owner_name)
        .single();

      if (data && !error) {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å localStorage
        const savedSecondaryImages = localStorage.getItem(`fitness_secondary_${data.id}`);
        const secondaryImages = savedSecondaryImages ? JSON.parse(savedSecondaryImages) : [];

        setFitnessData({
          id: data.id, // ‡πÄ‡∏Å‡πá‡∏ö fitness ID
          fit_name: data.fit_name || '',
          fit_user: data.fit_user || '',
          fit_price: data.fit_price || '',
          fit_image: data.fit_image || '',
          fit_image_secondary: Array.isArray(secondaryImages) ? secondaryImages : [],
          fit_address: data.fit_address || '',
          fit_contact: data.fit_contact || '',
          fit_dateopen: data.fit_dateopen || '',
          fit_dateclose: data.fit_dateclose || '',
          fit_location: data.fit_location || '',
          fit_moredetails: data.fit_moredetails || '',
          fit_phone: data.fit_phone || ''
        });

        // ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (data.fit_location) {
          const coords = data.fit_location.split(',');
          if (coords.length === 2) {
            setCoordinates({
              lat: parseFloat(coords[0].trim()),
              lng: parseFloat(coords[1].trim())
            });
          }
        }

        console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        setFitnessDataLoaded(true);
        setHasFitnessData(true);
        setFitnessMode('view'); // ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô view mode ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      } else {
        console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
        setFitnessDataLoaded(true);
        setHasFitnessData(false);
        setFitnessMode('view'); // ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô view ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      }
    } catch (error) {
      console.error('Error loading existing fitness data:', error);
      setFitnessDataLoaded(true);
      setHasFitnessData(false);
    }
  };

  const handleSectionChange = (section) => {
    console.log(`üîÑ Switching to section: ${section}`);
    setActiveSection(section);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å section ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô localStorage
    localStorage.setItem(`partner_active_section_${user?.id}`, section);
  };
  
  // ‡πÇ‡∏´‡∏•‡∏î active section ‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  React.useEffect(() => {
    if (user?.id) {
      const savedSection = localStorage.getItem(`partner_active_section_${user.id}`);
      if (savedSection) {
        setActiveSection(savedSection);
      }
    }
  }, [user?.id]);
  
  // Auto-save form data ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™
  React.useEffect(() => {
    if (user?.id && fitnessData.fit_name) {
      setAutoSaveStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...');
      
      const timeoutId = setTimeout(() => {
        const formData = {
          ...fitnessData,
          lastSaved: Date.now()
        };
        localStorage.setItem(`partner_fitness_draft_${user.id}`, JSON.stringify(formData));
        setAutoSaveStatus('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚úì');
        console.log('üíæ Auto-saved form data to localStorage');
        
        // ‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
          setAutoSaveStatus('');
        }, 2000);
      }, 2000); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

      return () => {
        clearTimeout(timeoutId);
        setAutoSaveStatus('');
      };
    }
  }, [fitnessData, user?.id]);
  
  // ‡πÇ‡∏´‡∏•‡∏î draft data ‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database)
  React.useEffect(() => {
    if (user?.id && !fitnessDataLoaded) {
      const savedDraft = localStorage.getItem(`partner_fitness_draft_${user.id}`);
      if (savedDraft) {
        try {
          const draftData = JSON.parse(savedDraft);
          const timeDiff = Date.now() - (draftData.lastSaved || 0);
          
          // ‡πÉ‡∏ä‡πâ draft ‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
          if (timeDiff < 86400000) {
            setFitnessData(prev => ({
              ...prev,
              ...draftData,
              lastSaved: undefined // ‡∏•‡∏ö field ‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å
            }));
            console.log('üìã Loaded draft data from localStorage');
          }
        } catch (error) {
          console.warn('Error loading draft data:', error);
        }
      }
    }
  }, [user?.id, fitnessDataLoaded]);



  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const uploadImage = async (file, imageType) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
      if (!allowedTypes.includes(file.type)) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPG, PNG, WebP ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)');
        return null;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (5MB)
      if (file.size > 5242880) {
        alert('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5MB)');
        return null;
      }

      if (imageType === 'main') {
        setUploading(true);
      } else {
        setUploadingSecondary(true);
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
      const fileExt = file.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;
      const filePath = `fitness/${Date.now()}/${fileName}`;

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á fitness-images bucket
      const { data, error } = await supabase.storage
        .from('fitness-images')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (error) {
        console.error('Upload error:', error);
        alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: ${error.message}`);
        return null;
      }

      console.log('Upload successful:', data);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á public URL
      const { data: urlData } = supabase.storage
        .from('fitness-images')
        .getPublicUrl(filePath);

      if (!urlData?.publicUrl) {
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ');
        return null;
      }

      console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î${imageType === 'main' ? '‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å' : '‡∏£‡∏π‡∏õ‡∏£‡∏≠‡∏á'}‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, urlData.publicUrl);
      return urlData.publicUrl;

    } catch (error) {
      console.error('Error uploading image:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: ' + error.message);
      return null;
    } finally {
      if (imageType === 'main') {
        setUploading(false);
      } else {
        setUploadingSecondary(false);
      }
    }
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å
  const removeMainImage = async () => {
    if (!fitnessData.fit_image) {
      alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏•‡∏ö');
      return;
    }
    
    if (window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏≤‡∏Å Supabase Storage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (fitnessData.fit_image.includes('supabase') && fitnessData.fit_image.includes('fitness-images')) {
          // ‡∏î‡∏∂‡∏á file path ‡∏à‡∏≤‡∏Å URL
          const url = new URL(fitnessData.fit_image);
          const pathParts = url.pathname.split('/');
          const objectIndex = pathParts.indexOf('object');
          
          if (objectIndex !== -1 && objectIndex + 2 < pathParts.length) {
            const filePath = pathParts.slice(objectIndex + 2).join('/');
            
            console.log('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Storage:', filePath);
            
            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Storage
            const { error } = await supabase.storage
              .from('fitness-images')
              .remove([filePath]);
            
            if (error) {
              console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Storage:', error.message);
            } else {
              console.log('‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Storage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            }
          }
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó state (‡∏•‡∏ö URL ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state ‡πÄ‡∏™‡∏°‡∏≠)
        setFitnessData({...fitnessData, fit_image: ''});
        alert('‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        console.log('‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } catch (error) {
        console.error('Error removing main image:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ' + error.message);
      }
    }
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const getCurrentLocation = () => {
    if (!navigator.geolocation) {
      alert('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Geolocation');
      return;
    }

    setGettingLocation(true);
    alert('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà');
    
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        setCoordinates({ lat: latitude, lng: longitude });
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
        const locationString = `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`;
        setFitnessData({...fitnessData, fit_location: locationString});
        
        setGettingLocation(false);
        alert(`‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${locationString}`);
        console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', locationString);
      },
      (error) => {
        setGettingLocation(false);
        console.error('Error getting location:', error);
        
        switch(error.code) {
          case error.PERMISSION_DENIED:
            alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå\n\n‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£:\n1. ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô üîí ‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö URL\n2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Location\n3. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
            break;
          case error.POSITION_UNAVAILABLE:
            alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GPS ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï');
            break;
          case error.TIMEOUT:
            alert('‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
            break;
          default:
            alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á');
            break;
        }
      },
      { 
        timeout: 15000, 
        enableHighAccuracy: true,
        maximumAge: 60000 // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ
      }
    );
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î
  const openGoogleMaps = () => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô Google Maps
    let mapUrl;
    
    if (coordinates.lat && coordinates.lng) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô
      mapUrl = `https://www.google.com/maps/@${coordinates.lat},${coordinates.lng},15z`;
    } else if (fitnessData.fit_location) {
      // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å string ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const coords = fitnessData.fit_location.split(',');
      if (coords.length === 2) {
        const lat = parseFloat(coords[0].trim());
        const lng = parseFloat(coords[1].trim());
        if (!isNaN(lat) && !isNaN(lng)) {
          mapUrl = `https://www.google.com/maps/@${lat},${lng},15z`;
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡πÉ‡∏´‡πâ search ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
          mapUrl = `https://www.google.com/maps/search/${encodeURIComponent(fitnessData.fit_location)}`;
        }
      } else {
        mapUrl = `https://www.google.com/maps/search/${encodeURIComponent(fitnessData.fit_location)}`;
      }
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
      mapUrl = 'https://www.google.com/maps/@13.7563,100.5018,10z';
    }
    
    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
    const newWindow = window.open(mapUrl, '_blank');
    
    if (newWindow) {
      alert(`üìç ‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‡πÅ‡∏•‡πâ‡∏ß!

üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î:
1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
2. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô
3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î" ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏ô URL
4. ‡∏ô‡∏≥‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á"

‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 13.756331, 100.501765`);
    } else {
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î popup ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á');
    }
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å
  const handleFileSelect = async (event, imageType) => {
    const file = event.target.files[0];
    if (!file) return;

    const uploadedUrl = await uploadImage(file, imageType);
    if (uploadedUrl) {
      if (imageType === 'main') {
        setFitnessData({...fitnessData, fit_image: uploadedUrl});
      }
    }
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏£‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ
  const handleSecondaryImagesSelect = async (event) => {
    const files = Array.from(event.target.files);
    if (files.length === 0) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const currentImages = fitnessData.fit_image_secondary.length;
    const newImagesCount = files.length;
    const totalImages = currentImages + newImagesCount;

    if (totalImages > 5) {
      alert(`‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏£‡∏π‡∏õ (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ ${currentImages} ‡∏£‡∏π‡∏õ, ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å ${5 - currentImages} ‡∏£‡∏π‡∏õ)`);
      return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
    const uploadedUrls = [];
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const uploadedUrl = await uploadImage(file, 'secondary');
      if (uploadedUrl) {
        uploadedUrls.push(uploadedUrl);
      }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏î‡πâ‡∏ß‡∏¢ URLs ‡πÉ‡∏´‡∏°‡πà
    if (uploadedUrls.length > 0) {
      setFitnessData({
        ...fitnessData, 
        fit_image_secondary: [...fitnessData.fit_image_secondary, ...uploadedUrls]
      });
    }
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏£‡∏≠‡∏á
  const removeSecondaryImage = async (indexToRemove, imageUrl) => {
    if (window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
      try {
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Storage (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏≤‡∏Å Storage)
        if (imageUrl && imageUrl.includes('supabase') && imageUrl.includes('fitness-images')) {
          try {
            // ‡∏î‡∏∂‡∏á file path ‡∏à‡∏≤‡∏Å URL
            const url = new URL(imageUrl);
            const pathParts = url.pathname.split('/');
            const objectIndex = pathParts.indexOf('object');
            
            if (objectIndex !== -1 && objectIndex + 2 < pathParts.length) {
              const filePath = pathParts.slice(objectIndex + 2).join('/');
              
              console.log('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å Storage:', filePath);
              
              const { error } = await supabase.storage
                .from('fitness-images')
                .remove([filePath]);
              
              if (error) {
                console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Storage:', error.message);
              } else {
                console.log('‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å Storage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
              }
            }
          } catch (urlError) {
            console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse URL:', urlError);
          }
        }

        // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å state (‡∏•‡∏ö‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Storage ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
        const updatedImages = fitnessData.fit_image_secondary.filter((_, index) => index !== indexToRemove);
        setFitnessData({...fitnessData, fit_image_secondary: updatedImages});
        
        alert('‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        console.log('‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏£‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } catch (error) {
        console.error('Error removing image:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ: ' + error.message);
      }
    }
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™


  // =============== FITNESS MODE MANAGEMENT FUNCTIONS ===============
  








  // =============== FITNESS CRUD FUNCTIONS ===============
  const saveFitnessChanges = async () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!fitnessData.fit_name.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™');
      return;
    }

    if (!partnerData?.owner_name) {
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà');
      return;
    }

    setSaving(true);
    try {
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      const fitnessInfo = {
        fit_name: fitnessData.fit_name,
        fit_user: partnerData.owner_name,
        fit_price: parseFloat(fitnessData.fit_price) || 100,
        fit_image: fitnessData.fit_image || '',
        fit_address: fitnessData.fit_address || '',
        fit_contact: fitnessData.fit_contact || '',
        fit_dateopen: fitnessData.fit_dateopen || '',
        fit_dateclose: fitnessData.fit_dateclose || '',
        fit_location: fitnessData.fit_location || '',
        fit_moredetails: fitnessData.fit_moredetails || '',
        fit_phone: fitnessData.fit_phone || '',
        updated_at: new Date().toISOString(),
      };

      let result;
      let fitnessId = fitnessData.id;
      let actionText = '';

      if (fitnessMode === 'create' || !fitnessId) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏´‡∏°‡πà
        fitnessInfo.created_at = new Date().toISOString();
        fitnessInfo.created_by = user.id;
        
        console.log('üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏´‡∏°‡πà:', fitnessInfo);

        result = await supabase
          .from('tbl_fitness')
          .insert([fitnessInfo])
          .select();

        if (result.error) {
          throw result.error;
        }

        fitnessId = result.data[0]?.id;
        actionText = '‡∏™‡∏£‡πâ‡∏≤‡∏á';
        
      } else if (fitnessMode === 'edit' && fitnessId) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        console.log('ÔøΩ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ ID:', fitnessId, fitnessInfo);
        
        result = await supabase
          .from('tbl_fitness')
          .update(fitnessInfo)
          .eq('id', fitnessId)
          .select();

        if (result.error) {
          throw result.error;
        }
        
        actionText = '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï';
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó state ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (fitnessId) {
        setFitnessData(prev => ({ ...prev, id: fitnessId }));
        setHasFitnessData(true);
        setFitnessDataLoaded(true);
        setFitnessMode('view');
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏£‡∏≠‡∏á‡πÉ‡∏ô localStorage
        if (fitnessData.fit_image_secondary.length > 0) {
          localStorage.setItem(`fitness_secondary_${fitnessId}`, JSON.stringify(fitnessData.fit_image_secondary));
          console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏£‡∏≠‡∏á‡πÉ‡∏ô localStorage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }

        // ‡∏•‡∏ö draft data
        localStorage.removeItem(`partner_fitness_draft_${user.id}`);
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
        if (actionText === '‡∏™‡∏£‡πâ‡∏≤‡∏á') {
          await loadEquipmentData();
        }
      }

      alert(`üéâ ${actionText}‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ "${fitnessData.fit_name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
- Fitness ID: ${fitnessId}
- ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á: ${partnerData.owner_name}
- ‡∏£‡∏≤‡∏Ñ‡∏≤: ${fitnessData.fit_price || 100} ‡∏ö‡∏≤‡∏ó
- ‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å: ${fitnessData.fit_image ? '‚úÖ' : '‚ùå'}
- ‡∏£‡∏π‡∏õ‡∏£‡∏≠‡∏á: ${fitnessData.fit_image_secondary.length} ‡∏£‡∏π‡∏õ

${actionText === '‡∏™‡∏£‡πâ‡∏≤‡∏á' ? 'ÔøΩ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!' : '‚ú® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß!'}`);

      console.log(`‚úÖ ${actionText}‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, result.data);

    } catch (error) {
      console.error('Error saving fitness:', error);
      
      let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™: ';
      
      if (error.code === '23505') {
        errorMessage += '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö';
      } else if (error.code === '23503') {
        errorMessage += '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      } else {
        errorMessage += error.message;
      }
      
      alert(errorMessage);
    } finally {
      setSaving(false);
    }
  };

  // =============== EQUIPMENT MANAGEMENT FUNCTIONS ===============

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const loadEquipmentData = useCallback(async () => {
    try {
      setEquipmentLoading(true);
      
      // ‡πÉ‡∏ä‡πâ fitness_id ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô fitnessData
      if (!fitnessData.id) {
        console.log('‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ fitness_id, ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå');
        setEquipmentList([]);
        return;
      }

      console.log('üìä Loading equipment data for fitness_id:', fitnessData.id);

      // ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ô‡∏µ‡πâ
      const { data, error } = await supabase
        .from('tbl_equipment')
        .select('*')
        .eq('fitness_id', fitnessData.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error loading equipment:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ' + error.message);
      } else {
        setEquipmentList(data || []);
        console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data);
      }
    } catch (error) {
      console.error('Error loading equipment:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ' + error.message);
    } finally {
      setEquipmentLoading(false);
    }
  }, [fitnessData.id]); // ‡πÉ‡∏ä‡πâ fitness_id ‡πÅ‡∏ó‡∏ô

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó
  const saveEquipment = async () => {
    if (!equipmentData.em_name.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå');
      return;
    }

    setSavingEquipment(true);
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö fitness_id
      if (!fitnessData.id) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏Å‡πà‡∏≠‡∏ô');
        return;
      }

      const equipmentInfo = {
        em_name: equipmentData.em_name,
        em_image: equipmentData.em_image || '',
        fitness_id: fitnessData.id, // ‡πÉ‡∏ä‡πâ fitness_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        updated_at: new Date().toISOString()
      };

      let result;

      if (editingEquipment) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        result = await supabase
          .from('tbl_equipment')
          .update(equipmentInfo)
          .eq('em_id', editingEquipment.em_id)
          .select();
        
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
        equipmentInfo.created_at = new Date().toISOString();
        equipmentInfo.created_by = user.id;
        
        result = await supabase
          .from('tbl_equipment')
          .insert([equipmentInfo])
          .select();
        
        console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

      if (result.error) {
        throw result.error;
      }

      alert(`‚úÖ ${editingEquipment ? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó' : '‡πÄ‡∏û‡∏¥‡πà‡∏°'}‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      setEquipmentData({ em_name: '', em_image: '' });
      setEditingEquipment(null);
      loadEquipmentData();

    } catch (error) {
      console.error('Error saving equipment:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ' + error.message);
    } finally {
      setSavingEquipment(false);
    }
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const deleteEquipment = async (equipment) => {
    if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå "${equipment.em_name}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
      return;
    }

    try {
      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Storage ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (equipment.em_image && equipment.em_image.includes('supabase') && equipment.em_image.includes('fitness-images')) {
        try {
          const url = new URL(equipment.em_image);
          const pathParts = url.pathname.split('/');
          const objectIndex = pathParts.indexOf('object');
          
          if (objectIndex !== -1 && objectIndex + 2 < pathParts.length) {
            const filePath = pathParts.slice(objectIndex + 2).join('/');
            
            const { error: storageError } = await supabase.storage
              .from('fitness-images')
              .remove([filePath]);
            
            if (storageError) {
              console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Storage:', storageError.message);
            } else {
              console.log('‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Storage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            }
          }
        } catch (urlError) {
          console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse URL:', urlError);
        }
      }

      // ‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const { error } = await supabase
        .from('tbl_equipment')
        .delete()
        .eq('em_id', equipment.em_id);

      if (error) {
        throw error;
      }

      alert('‚úÖ ‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      loadEquipmentData();

    } catch (error) {
      console.error('Error deleting equipment:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ' + error.message);
    }
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const startEditEquipment = (equipment) => {
    setEditingEquipment(equipment);
    setEquipmentData({
      em_name: equipment.em_name,
      em_image: equipment.em_image || ''
    });
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const cancelEditEquipment = () => {
    setEditingEquipment(null);
    setEquipmentData({ em_name: '', em_image: '' });
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const uploadEquipmentImage = async (file) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
      if (!allowedTypes.includes(file.type)) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPG, PNG, WebP ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)');
        return null;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (5MB)
      if (file.size > 5242880) {
        alert('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5MB)');
        return null;
      }

      setUploading(true);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
      const fileExt = file.name.split('.').pop();
      const fileName = `equipment-${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;
      const filePath = `equipment/${Date.now()}/${fileName}`;

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á fitness-images bucket
      const { error } = await supabase.storage
        .from('fitness-images')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (error) {
        console.error('Upload error:', error);
        alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: ${error.message}`);
        return null;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á public URL
      const { data: urlData } = supabase.storage
        .from('fitness-images')
        .getPublicUrl(filePath);

      if (!urlData?.publicUrl) {
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ');
        return null;
      }

      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', urlData.publicUrl);
      return urlData.publicUrl;

    } catch (error) {
      console.error('Error uploading equipment image:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: ' + error.message);
      return null;
    } finally {
      setUploading(false);
    }
  };

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const handleEquipmentImageSelect = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const uploadedUrl = await uploadEquipmentImage(file);
    if (uploadedUrl) {
      setEquipmentData({...equipmentData, em_image: uploadedUrl});
    }
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ equipment ‡πÅ‡∏•‡∏∞‡∏°‡∏µ fitness_id
  React.useEffect(() => {
    if (activeSection === 'equipment' && fitnessData.id) {
      loadEquipmentData();
    }
  }, [activeSection, fitnessData.id, loadEquipmentData]);

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
      </div>
    );
  }

  return (
    <div className="main-partners">
      <header className="partners-header">
        <div className="header-content">
          <h1>üèãÔ∏è‚Äç‚ôÇÔ∏è Partner Dashboard</h1>
          <div className="user-info">
            <span>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {partnerData?.owner_name || 'Partner'}</span>
            <button onClick={handleLogoutClick} className="logout-btn">
              ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            </button>
          </div>
        </div>
      </header>

      <div className="partners-container">
        <nav className="partners-sidebar">
          <div className="sidebar-menu">
            <button 
              className={`menu-item ${activeSection === 'dashboard' ? 'active' : ''}`}
              onClick={() => handleSectionChange('dashboard')}
            >
              <span className="icon">üìä</span>
              ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
            </button>
            <button 
              className={`menu-item ${activeSection === 'members' ? 'active' : ''}`}
              onClick={() => handleSectionChange('members')}
            >
              <span className="icon">üë•</span>
              ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            </button>
            <button 
              className={`menu-item ${activeSection === 'bookings' ? 'active' : ''}`}
              onClick={() => handleSectionChange('bookings')}
            >
              <span className="icon">üìÖ</span>
              ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            </button>
            <button 
              className={`menu-item ${activeSection === 'classes' ? 'active' : ''}`}
              onClick={() => handleSectionChange('classes')}
            >
              <span className="icon">üí™</span>
              ‡∏Ñ‡∏•‡∏≤‡∏™‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
            </button>
            <button 
              className={`menu-item ${activeSection === 'fitness-info' ? 'active' : ''}`}
              onClick={() => handleSectionChange('fitness-info')}
            >
              <span className="icon">üè¢</span>
              {hasFitnessData ? '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™' : '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™'}
            </button>
            <button 
              className={`menu-item ${activeSection === 'equipment' ? 'active' : ''}`}
              onClick={() => handleSectionChange('equipment')}
            >
              <span className="icon">üèãÔ∏è</span>
              ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            </button>
            <button 
              className={`menu-item ${activeSection === 'pricing' ? 'active' : ''}`}
              onClick={() => handleSectionChange('pricing')}
            >
              <span className="icon">üí∞</span>
              ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤
            </button>
            <button 
              className={`menu-item ${activeSection === 'activities' ? 'active' : ''}`}
              onClick={() => handleSectionChange('activities')}
            >
              <span className="icon">üì∏</span>
              ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            </button>
            <button 
              className={`menu-item ${activeSection === 'payment-status' ? 'active' : ''}`}
              onClick={() => handleSectionChange('payment-status')}
            >
              <span className="icon">üí≥</span>
              ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞
            </button>
            <button 
              className={`menu-item ${activeSection === 'promotions' ? 'active' : ''}`}
              onClick={() => handleSectionChange('promotions')}
            >
              <span className="icon">üì¢</span>
              ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
            </button>
            <button 
              className={`menu-item ${activeSection === 'qr-scanner' ? 'active' : ''}`}
              onClick={() => handleSectionChange('qr-scanner')}
            >
              <span className="icon">üì±</span>
              ‡∏™‡πÅ‡∏Å‡∏ô QR
            </button>
            <button 
              className={`menu-item ${activeSection === 'reports' ? 'active' : ''}`}
              onClick={() => handleSectionChange('reports')}
            >
              <span className="icon">üìà</span>
              ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            </button>
            <button 
              className={`menu-item ${activeSection === 'settings' ? 'active' : ''}`}
              onClick={() => handleSectionChange('settings')}
            >
              <span className="icon">‚öôÔ∏è</span>
              ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            </button>
          </div>
        </nav>

        <main className="partners-content">
          {activeSection === 'dashboard' && (
            <div className="dashboard-section">
              <h2>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î</h2>
              <div className="stats-grid">
                <div className="stat-card">
                  <div className="stat-icon">üë•</div>
                  <div className="stat-info">
                    <h3>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
                    <p className="stat-number">150</p>
                  </div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">üìÖ</div>
                  <div className="stat-info">
                    <h3>‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h3>
                    <p className="stat-number">25</p>
                  </div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">üí∞</div>
                  <div className="stat-info">
                    <h3>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</h3>
                    <p className="stat-number">‚Çø45,000</p>
                  </div>
                </div>
                <div className="stat-card">
                  <div className="main-partners">
                    <header className="partners-header">
                      <div className="header-content">
                        <h1>üèãÔ∏è‚Äç‚ôÇÔ∏è Partner Dashboard</h1>
                        <div className="user-info">
                          <span>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {partnerData?.owner_name || 'Partner'}</span>
                          <button onClick={handleLogoutClick} className="logout-btn">
                            ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                          </button>
                        </div>
                      </div>
                    </header>
                    <div className="partners-container">
                      <nav className="partners-sidebar">
                        <div className="sidebar-menu">
                          {/* ...menu buttons... */}
                        </div>
                      </nav>
                      <main className="partners-content">
                        {activeSection === 'dashboard' && (
                          <div className="dashboard-section">{/* ...dashboard code... */}</div>
                        )}
                        {activeSection === 'members' && (
                          <div className="members-section">{/* ...members code... */}</div>
                        )}
                        {activeSection === 'bookings' && (
                          <div className="bookings-section">{/* ...bookings code... */}</div>
                        )}
                        {activeSection === 'classes' && (
                          <div className="classes-section">{/* ...classes code... */}</div>
                        )}
                        {activeSection === 'fitness-info' && (
                          <FitnessManagement />
                        )}
                        {activeSection === 'equipment' && (
                          <EquipmentManagement />
                        )}
                        {activeSection === 'fitness' && (
                          <div className="fitness-info-section">{/* ...fitness code... */}</div>
                        )}
                        {activeSection === 'pricing' && (
                          <div className="pricing-section">{/* ...pricing code... */}</div>
                        )}
                        {/* ...other sections... */}
                      </main>
                    </div>
                  </div>
                  <h4>ÔøΩ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</h4>
                  
                  <ul>
                    <li>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: JPG, PNG, WebP</li>
                    <li>‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: 5MB</li>
                   
                  </ul>
                </div>
              </div>
              
              <div className="section-content">
                <div className="settings-group">
                  <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™</h3>
                  
                  <div className="form-group">
                    <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™:</label>
                    <input 
                      type="text" 
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™"
                      value={fitnessData.fit_name}
                      onChange={(e) => setFitnessData({...fitnessData, fit_name: e.target.value})}
                    />
                  </div>
                  
                  <div className="form-group">
                    <label>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£:</label>
                    <input 
                      type="text" 
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á"
                      value={fitnessData.fit_user || partnerData?.owner_name || ''}
                      onChange={(e) => setFitnessData({...fitnessData, fit_user: e.target.value})}
                    />
                  </div>
                  
                  <div className="form-group">
                    <label>‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô):</label>
                    <input 
                      type="number" 
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô"
                      value={fitnessData.fit_price}
                      onChange={(e) => setFitnessData({...fitnessData, fit_price: e.target.value})}
                    />
                  </div>
                  
                  <div className="form-group">
                    <label>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å:</label>
                    <div className="image-upload-section">
                      <div className="upload-options">
                        <div className="upload-method">
                          <label className="upload-btn">
                            üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
                            <input 
                              type="file" 
                              accept="image/jpeg,image/jpg,image/png,image/webp"
                              onChange={(e) => handleFileSelect(e, 'main')}
                              style={{ display: 'none' }}
                            />
                          </label>
                          <span className="upload-note">‡∏´‡∏£‡∏∑‡∏≠</span>
                          <input 
                            type="url" 
                            placeholder="‡∏Å‡∏£‡∏≠‡∏Å URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å"
                            aria-label="URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å"
                            value={fitnessData.fit_image}
                            onChange={(e) => setFitnessData({...fitnessData, fit_image: e.target.value})}
                            className="url-input"
                          />
                        </div>
                        {uploading && (
                          <div className="upload-status">
                            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...</span>
                          </div>
                        )}
                      </div>
                      {fitnessData.fit_image && (
                        <div className="image-preview">
                          <img 
                            src={fitnessData.fit_image} 
                            alt="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å" 
                            onError={(e) => {
                              e.target.style.display = 'none';
                            }}
                          />
                          <div className="image-controls">
                            <span className="image-label">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å</span>
                            <button 
                              type="button"
                              className="remove-image-btn"
                              onClick={removeMainImage}
                              title="‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å"
                            >
                              üóëÔ∏è
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏≠‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏£‡∏π‡∏õ):</label>
                    <div className="image-upload-section">
                      <div className="upload-options">
                        <div className="upload-method">
                          <label className="upload-btn">
                            üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ
                            <input 
                              type="file" 
                              accept="image/jpeg,image/jpg,image/png,image/webp"
                              multiple
                              onChange={handleSecondaryImagesSelect}
                              style={{ display: 'none' }}
                            />
                          </label>
                          <div className="upload-info">
                            <span>üìå ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô</span>
                            <span>üìä ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {fitnessData.fit_image_secondary.length}/5 ‡∏£‡∏π‡∏õ</span>
                          </div>
                        </div>
                        {uploadingSecondary && (
                          <div className="upload-status">
                            <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...</span>
                          </div>
                        )}
                      </div>

                      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
                      {fitnessData.fit_image_secondary.length > 0 && (
                        <div className="secondary-images-grid">
                          <h4>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏≠‡∏á ({fitnessData.fit_image_secondary.length}/5)</h4>
                          <div className="images-gallery">
                            {fitnessData.fit_image_secondary.map((imageUrl, index) => (
                              <div key={index} className="secondary-image-item">
                                <img 
                                  src={imageUrl} 
                                  alt={`‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏≠‡∏á ${index + 1}`} 
                                  onError={(e) => {
                                    e.target.style.display = 'none';
                                  }}
                                />
                                <div className="image-overlay">
                                  <span className="image-number">{index + 1}</span>
                                  <button 
                                    type="button"
                                    className="delete-image-btn"
                                    onClick={() => removeSecondaryImage(index, imageUrl)}
                                    title="‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ"
                                  >
                                    üóëÔ∏è
                                  </button>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</label>
                    <textarea 
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™" 
                      rows="3"
                      value={fitnessData.fit_address}
                      onChange={(e) => setFitnessData({...fitnessData, fit_address: e.target.value})}
                    ></textarea>
                  </div>
                  
                  <div className="form-group">
                    <label>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</label>
                    <input 
                      type="text" 
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
                      value={fitnessData.fit_contact}
                      onChange={(e) => setFitnessData({...fitnessData, fit_contact: e.target.value})}
                    />
                  </div>
                  
                  <div className="form-row">
                    <div className="form-group">
                      <label>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î:</label>
                      <input 
                        type="time" 
                        aria-label="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™"
                        value={fitnessData.fit_dateopen}
                        onChange={(e) => setFitnessData({...fitnessData, fit_dateopen: e.target.value})}
                      />
                    </div>
                    
                    <div className="form-group">
                      <label>‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î:</label>
                      <input 
                        type="time" 
                        aria-label="‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™"
                        value={fitnessData.fit_dateclose}
                        onChange={(e) => setFitnessData({...fitnessData, fit_dateclose: e.target.value})}
                      />
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS:</label>
                    <div className="location-input-section">
                      <input 
                        type="text" 
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡πÄ‡∏ä‡πà‡∏ô 13.7563, 100.5018"
                        aria-label="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS"
                        value={fitnessData.fit_location}
                        onChange={(e) => setFitnessData({...fitnessData, fit_location: e.target.value})}
                        className="location-input"
                        style={{ marginBottom: '8px' }}
                      />
                      {fitnessData.fit_location && (
                        <div style={{ color: '#fff', fontSize: '0.95em' }}>
                          ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {fitnessData.fit_location}
                        </div>
                      )}
                      <div className="location-buttons">
                        <button 
                          type="button"
                          className="location-btn"
                          onClick={getCurrentLocation}
                          disabled={gettingLocation}
                          title="‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
                        >
                          {gettingLocation ? 'üìç‚è≥' : 'üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'}
                        </button>
                        <button 
                          type="button"
                          className="maps-btn"
                          onClick={openGoogleMaps}
                          title="‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Google Maps"
                        >
                          üó∫Ô∏è Google Maps
                        </button>
                      </div>
                      {coordinates.lat && coordinates.lng && (
                        <div className="coordinates-display">
                          <small>‡∏û‡∏¥‡∏Å‡∏±‡∏î: {coordinates.lat.toFixed(6)}, {coordinates.lng.toFixed(6)}</small>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="form-group">
                    <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</label>
                    <textarea 
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™" 
                      rows="4"
                      value={fitnessData.fit_moredetails}
                      onChange={(e) => setFitnessData({...fitnessData, fit_moredetails: e.target.value})}
                    ></textarea>
                  </div>
                  
                  <div className="form-group">
                    <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</label>
                    <input 
                      type="tel" 
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                      value={fitnessData.fit_phone}
                      onChange={(e) => setFitnessData({...fitnessData, fit_phone: e.target.value})}
                    />
                  </div>
                </div>
                
                <div className="action-buttons">
                  <button 
                    className="btn-primary" 
                    onClick={saveFitnessChanges}
                    disabled={saving}
                  >
                    {saving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : (hasFitnessData ? '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}
                  </button>
                  
                  <button 
                    className="btn-success" 
                    onClick={saveFitnessChanges}
                    disabled={saving}
                    style={{ backgroundColor: '#17a2b8', borderColor: '#17a2b8' }}
                  >
                      {saving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : 'ÔøΩ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™'}
                    </button>
                  
                  <button 
                    className="btn-secondary"
                    onClick={() => setFitnessData({
                      id: null,
                      fit_name: '',
                      fit_user: '',
                      fit_price: '',
                      fit_image: '',
                      fit_image_secondary: [],
                      fit_address: '',
                      fit_contact: '',
                      fit_dateopen: '',
                      fit_dateclose: '',
                      fit_location: '',
                      fit_moredetails: '',
                      fit_phone: ''
                    })}
                  >
                    ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </button>
                </div>
              </div>
            </div>
          )}
          

          {activeSection === 'pricing' && (
            <div className="pricing-section">
              <h2>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</h2>
              <div className="section-content">
                <div className="pricing-grid">
                  <div className="pricing-card">
                    <h3>‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h3>
                    <div className="form-group">
                      <label>‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô:</label>
                      <input type="number" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤" />
                    </div>
                    <div className="form-group">
                      <label>‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</label>
                      <input type="number" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤" />
                    </div>
                    <div className="form-group">
                      <label>‡∏£‡∏≤‡∏¢‡∏õ‡∏µ:</label>
                      <input type="number" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤" />
                    </div>
                  </div>
                  <div className="pricing-card">
                    <h3>‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏≤‡∏™</h3>
                    <div className="form-group">
                      <label>‡∏Ñ‡∏•‡∏≤‡∏™‡πÇ‡∏¢‡∏Ñ‡∏∞:</label>
                      <input type="number" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤" />
                    </div>
                    <div className="form-group">
                      <label>‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏≠‡πÇ‡∏£‡∏ö‡∏¥‡∏Ñ:</label>
                      <input type="number" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤" />
                    </div>
                    <div className="form-group">
                      <label>‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß:</label>
                      <input type="number" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤" />
                    </div>
                  </div>
                </div>
                <div className="action-buttons">
                  <button className="btn-primary">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤</button>
                  <button className="btn-secondary">‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï</button>
                </div>
              </div>
            </div>
          )}

          {activeSection === 'activities' && (
            <div className="activities-section">
              <h2>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h2>
              <div className="section-content">
                <div className="upload-section">
                  <h3>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h3>
                  <div className="upload-area">
                    <input type="file" accept="image/*" multiple />
                    <p>‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå</p>
                  </div>
                </div>
                <div className="activity-form">
                  <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h3>
                  <div className="form-group">
                    <label>‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
                    <input type="text" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏•‡∏≤‡∏™‡πÇ‡∏¢‡∏Ñ‡∏∞" />
                  </div>
                  <div className="form-group">
                    <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
                    <textarea placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°" rows="4"></textarea>
                  </div>
                  <div className="form-group">
                    <label>‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</label>
                    <input type="datetime-local" />
                  </div>
                </div>
                <div className="action-buttons">
                  <button className="btn-primary">‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</button>
                  <button className="btn-secondary">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á</button>
                </div>
              </div>
            </div>
          )}

          {activeSection === 'payment-status' && (
            <div className="payment-status-section">
              <h2>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
              <div className="section-content">
                <div className="search-bar">
                  <input type="text" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•" />
                  <button className="btn-primary">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
                </div>
                <div className="payment-table">
                  <table>
                    <thead>
                      <tr>
                        <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</th>
                        <th>‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à</th>
                        <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                        <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ</td>
                        <td>‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</td>
                        <td>01/09/2025</td>
                        <td><span className="status-paid">‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß</span></td>
                        <td>1,500 ‡∏ö‡∏≤‡∏ó</td>
                        <td><button className="btn-secondary">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button></td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          )}

          {activeSection === 'promotions' && (
            <div className="promotions-section">
              <h2>‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
              <div className="section-content">
                <div className="promotion-form">
                  <h3>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà</h3>
                  <div className="form-group">
                    <label>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô:</label>
                    <input type="text" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 50% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà" />
                  </div>
                  <div className="form-group">
                    <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
                    <textarea placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô" rows="3"></textarea>
                  </div>
                  <div className="form-group">
                    <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</label>
                    <input type="date" />
                  </div>
                  <div className="form-group">
                    <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</label>
                    <input type="date" />
                  </div>
                  <div className="form-group">
                    <label>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:</label>
                    <textarea placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)" rows="2"></textarea>
                  </div>
                </div>
                <div className="action-buttons">
                  <button className="btn-primary">‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•</button>
                  <button className="btn-secondary">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πà‡∏≤‡∏á</button>
                </div>
              </div>
            </div>
          )}

          {activeSection === 'qr-scanner' && (
            <div className="qr-scanner-section">
              <h2>‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h2>
              <div className="section-content">
                <div className="scanner-area">
                  <div className="qr-placeholder">
                    <span className="icon">üì±</span>
                    <h3>‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô QR Code</h3>
                    <p>‡∏ô‡∏≥ QR Code ‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏°‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</p>
                    <button className="btn-primary">‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á</button>
                  </div>
                </div>
                <div className="scan-history">
                  <h3>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h3>
                  <div className="scan-item">
                    <span className="scan-time">10:30 ‡∏ô.</span>
                    <span className="member-name">‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ</span>
                    <span className="booking-info">‡∏Ñ‡∏•‡∏≤‡∏™‡πÇ‡∏¢‡∏Ñ‡∏∞ - 11:00 ‡∏ô.</span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeSection === 'equipment' && (
            <div className="equipment-section">
              <div className="section-header">
                <h2>üèãÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h2>
                <div className="connection-status">
                  {fitnessData.id ? (
                    <span className="status-connected">
                      ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™: {fitnessData.fit_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}
                    </span>
                  ) : (
                    <span className="status-disconnected">
                      ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏Å‡πà‡∏≠‡∏ô
                    </span>
                  )}
                </div>
              </div>
              
              {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå */}
              <div className="section-content">
                <div className="settings-group">
                  <h3>{editingEquipment ? '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' : '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà'}</h3>
                  
                  <div className="form-group">
                    <label htmlFor="equipment-name">‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</label>
                    <input 
                      id="equipment-name"
                      type="text" 
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
                      value={equipmentData.em_name}
                      onChange={(e) => setEquipmentData({...equipmentData, em_name: e.target.value})}
                    />
                  </div>

                  <div className="form-group">
                    <label htmlFor="equipment-image">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</label>
                    <div className="image-upload-section">
                      <input 
                        id="equipment-image"
                        type="file" 
                        accept="image/*"
                        onChange={handleEquipmentImageSelect}
                        disabled={uploading}
                      />
                      {uploading && (
                        <div className="upload-status">
                          <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...</span>
                        </div>
                      )}
                      {equipmentData.em_image && (
                        <div className="image-preview">
                          <img src={equipmentData.em_image} alt="Preview" />
                          <div className="image-label">‡∏£‡∏π‡∏õ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</div>
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="action-buttons">
                    <button 
                      className="btn-primary"
                      onClick={saveEquipment}
                      disabled={savingEquipment || !equipmentData.em_name.trim()}
                    >
                      {savingEquipment ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : (editingEquipment ? 'üíæ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó' : '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå')}
                    </button>
                    {editingEquipment && (
                      <button 
                        className="btn-secondary"
                        onClick={cancelEditEquipment}
                      >
                        ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                      </button>
                    )}
                  </div>
                </div>
              </div>

              {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå */}
              <div className="section-content">
                <div className="settings-group">
                  <h3>üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
                  
                  {equipmentLoading ? (
                    <div className="loading-message">
                      <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå...</span>
                    </div>
                  ) : equipmentList.length === 0 ? (
                    <div className="empty-message">
                      <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà</p>
                    </div>
                  ) : (
                    <div className="equipment-grid">
                      {equipmentList.map((equipment) => (
                        <div key={equipment.em_id} className="equipment-card">
                          {equipment.em_image && (
                            <div className="equipment-image">
                              <img src={equipment.em_image} alt={equipment.em_name} />
                            </div>
                          )}
                          <div className="equipment-info">
                            <h4>{equipment.em_name}</h4>
                            <div className="equipment-meta">
                              <small>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(equipment.created_at).toLocaleDateString('th-TH')}</small>
                            </div>
                            <div className="equipment-actions">
                              <button 
                                className="btn-edit"
                                onClick={() => startEditEquipment(equipment)}
                                title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
                              >
                                ‚úèÔ∏è
                              </button>
                              <button 
                                className="btn-delete"
                                onClick={() => deleteEquipment(equipment)}
                                title="‡∏•‡∏ö"
                              >
                                üóëÔ∏è
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {activeSection === 'reports' && (
            <div className="reports-section">
              <h2>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</h2>
              <div className="section-content">
                <p>‡∏™‡πà‡∏ß‡∏ô‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
                <div className="action-buttons">
                  <button className="btn-primary">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</button>
                  <button className="btn-secondary">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</button>
                </div>
              </div>
            </div>
          )}

          {activeSection === 'settings' && (
            <div className="settings-section">
              <h2>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h2>
              <div className="section-content">
                <div className="settings-group">
                  <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</h3>
                  <div className="form-group">
                    <label>‡∏ä‡∏∑‡πà‡∏≠:</label>
                    <input 
                      type="text" 
                      value={partnerData?.owner_name || ''} 
                      readOnly 
                    />
                  </div>
                  <div className="form-group">
                    <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
                    <input 
                      type="email" 
                      value={partnerData?.owner_email || ''} 
                      readOnly 
                    />
                  </div>
                </div>
                
                <div className="settings-group">
                  <h3>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</h3>
                  <div className="action-buttons">
                    <button className="btn-primary">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
                    <button className="btn-secondary">‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default MainPartners;