import React, { useState, useEffect, useCallback } from 'react';
import supabase from '../supabaseClient';
import './AdminPage.css';

const AdminPage = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [adminData, setAdminData] = useState(null);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [loginForm, setLoginForm] = useState({
    email: 'admin@pjfitness.com',
    password: 'PJFitness@2025!'
  });
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
  const [dashboardData, setDashboardData] = useState({
    users: [],
    partners: [],
    bookings: [],
    reviews: [],
    notifications: [],
    revenue: {
      daily: 0,
      monthly: 0,
      yearly: 0
    }
  });

  useEffect(() => {
    checkAdminAuth();
  }, []);

  const checkAdminAuth = async () => {
    try {
      console.log('Admin auth check skipped - using simple login');
    } catch (error) {
      console.error('Auth check error:', error);
    }
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setMessage('');

    try {
      const { data: adminUser, error } = await supabase
        .from('tbl_admin')
        .select('*')
        .eq('admin_name', loginForm.email)
        .eq('admin_password', loginForm.password)
        .single();

      if (error || !adminUser) {
        throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      }

      setAdminData(adminUser);
      setIsAuthenticated(true);
      setMessage('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      setActiveTab('dashboard');
      
      loadDashboardData();
    } catch (error) {
      setMessage(`‚ùå ${error.message}`);
    }
    
    setIsLoading(false);
  };

  const loadDashboardData = async () => {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const { data: users } = await supabase
        .from('profiles')
        .select('*')
        .order('created_at', { ascending: false });

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå
      const { data: partners } = await supabase
        .from('tbl_owner')
        .select('*');

      setDashboardData(prev => ({
        ...prev,
        users: users || [],
        partners: partners || []
      }));
    } catch (error) {
      console.error('Error loading dashboard data:', error);
    }
  };

  const handleLogout = async () => {
    setIsAuthenticated(false);
    setAdminData(null);
    setActiveTab('dashboard');
    setMessage('');
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setLoginForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  if (!isAuthenticated) {
    return (
      <div className="admin-login-container">
        <div className="admin-login-card">
          <h1>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</h1>
          <p className="admin-subtitle">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ PJ Fitness</p>
          
          {message && (
            <div className={`admin-message ${message.includes('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') ? 'success' : 'error'}`}>
              {message}
            </div>
          )}

          <form className="admin-login-form" onSubmit={handleLogin}>
            <div className="admin-form-group">
              <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
              <input
                type="email"
                name="email"
                value={loginForm.email}
                onChange={handleInputChange}
                placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"
                required
              />
            </div>
            <div className="admin-form-group">
              <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:</label>
              <input
                type="password"
                name="password"
                value={loginForm.password}
                onChange={handleInputChange}
                placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                required
              />
            </div>
            <button 
              type="submit" 
              className="admin-login-btn"
              disabled={isLoading}
            >
              {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'}
            </button>
          </form>
        </div>
      </div>
    );
  }

  // ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å Admin
  return (
    <div className="admin-dashboard">
      {/* Header */}
      <header className="admin-header">
        <div className="admin-header-content">
          <h1>üîß Admin Dashboard - PJ Fitness</h1>
          <div className="admin-user-info">
            <span>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {adminData?.admin_name}</span>
            <button onClick={handleLogout} className="logout-btn">
              ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            </button>
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <nav className="admin-nav admin-tabs">
        <div className="admin-nav-content">
          <button 
            className={`tab-btn ${activeTab === 'dashboard' ? 'active' : ''}`}
            onClick={() => setActiveTab('dashboard')}
          >
            üìä ‡πÅ‡∏îshboard
          </button>
          <button 
            className={`tab-btn ${activeTab === 'users' ? 'active' : ''}`}
            onClick={() => setActiveTab('users')}
          >
            üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          </button>
          <button 
            className={`tab-btn ${activeTab === 'partners' ? 'active' : ''}`}
            onClick={() => setActiveTab('partners')}
          >
            üè¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå
          </button>
          <button 
            className={`tab-btn ${activeTab === 'registration' ? 'active' : ''}`}
            onClick={() => setActiveTab('registration')}
          >
            üìù ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
          </button>
          <button 
            className={`tab-btn ${activeTab === 'bookings' ? 'active' : ''}`}
            onClick={() => setActiveTab('bookings')}
          >
            üìÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
          </button>
          <button 
            className={`tab-btn ${activeTab === 'payments' ? 'active' : ''}`}
            onClick={() => setActiveTab('payments')}
          >
            üí≥ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          </button>
          <button 
            className={`tab-btn ${activeTab === 'reviews' ? 'active' : ''}`}
            onClick={() => setActiveTab('reviews')}
          >
            ‚≠ê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
          </button>
          <button 
            className={`tab-btn ${activeTab === 'notifications' ? 'active' : ''}`}
            onClick={() => setActiveTab('notifications')}
          >
            üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          </button>
          <button 
            className={`tab-btn ${activeTab === 'reports' ? 'active' : ''}`}
            onClick={() => setActiveTab('reports')}
          >
            üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
          </button>
        </div>
      </nav>

      {/* Main Content */}
      <main className="admin-main">
        {activeTab === 'dashboard' && <DashboardTab data={dashboardData} />}
        {activeTab === 'users' && <UsersTab data={dashboardData} />}
        {activeTab === 'partners' && <PartnersTab data={dashboardData} />}
        {activeTab === 'registration' && <RegistrationTab data={dashboardData} />}
        {activeTab === 'bookings' && <BookingsTab />}
        {activeTab === 'payments' && <PaymentsTab />}
        {activeTab === 'reviews' && <ReviewsTab />}
        {activeTab === 'notifications' && <NotificationsTab />}
        {activeTab === 'reports' && <ReportsTab />}
      </main>
    </div>
  );
};

// Partners Tab Component
const PartnersTab = ({ data }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('');
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const filteredPartners = data?.partners?.filter(partner => {
    const matchesSearch = !searchTerm || 
      partner.owner_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      partner.owner_email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      partner.fitness_name?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = !filterStatus || 
      (filterStatus === 'active' && partner.status !== 'inactive') ||
      (filterStatus === 'inactive' && partner.status === 'inactive');
    
    return matchesSearch && matchesStatus;
  }) || [];

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå id ‡∏ô‡∏±‡πâ‡∏ô
  const [fitnessDetail, setFitnessDetail] = useState(null);

  const handleViewFitness = async (partnerId) => {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ partnerId
    const { data } = await supabase
      .from('tbl_fitness')
      .select('fit_name')
      .eq('created_by', partnerId)
      .single();
    setFitnessDetail(data);
  };

  return (
    <div className="partners-content">
      <h2>üè¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</h2>
      <div className="section">
        <div className="admin-stats">
          <div className="stat-card">
            <h3>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
            <span className="stat-number">{data?.partners?.length || 0}</span>
          </div>
          <div className="stat-card">
            <h3>‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á</h3>
            <span className="stat-number">{filteredPartners.length}</span>
          </div>
        </div>
        
        <div className="data-management">
          <div className="section-header">
            <h3>üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</h3>
            <div className="action-buttons">
              <button className="btn-add">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà</button>
              <button className="btn-export">üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
            </div>
          </div>
          
          <div className="search-section">
            <input 
              type="text" 
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå..." 
              className="search-input"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <select 
              className="filter-select"
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
            >
              <option value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
              <option value="active">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà</option>
              <option value="inactive">‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>
            </select>
          </div>

          <div className="data-table">
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</th>
                  <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™</th>
                  <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {filteredPartners.length > 0 ? (
                  filteredPartners.map((partner, index) => (
                    <tr key={partner.id || index}>
                      <td>{partner.id || `P${String(index + 1).padStart(3, '0')}`}</td>
                      <td>{partner.owner_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                      <td>{partner.owner_email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                      <td>{partner.fitness_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™'}</td>
                      <td>{partner.created_at ? new Date(partner.created_at).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                      <td><span className="status-active">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà</span></td>
                      <td>
                        <button className="btn-edit">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                        <button className="btn-view" onClick={() => handleViewFitness(partner.id)}>‡∏î‡∏π</button>
                        <button className="btn-delete">‡∏•‡∏ö</button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="7" style={{ textAlign: 'center', padding: '2rem' }}>
                      <div>
                        <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
                        {data?.partners?.length === 0 && (
                          <button className="btn-add">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÅ‡∏£‡∏Å</button>
                        )}
                      </div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
          
          <div className="partner-actions">
            <div className="bulk-actions">
              <h4>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°</h4>
              <select className="bulk-select">
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
                <option value="activate">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>
                <option value="deactivate">‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>
                <option value="delete">‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</option>
              </select>
              <button className="btn-apply">‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</button>
            </div>
          </div>
        </div>
      </div>

      {/* Fitness Detail - Modal or Section */}
      {fitnessDetail && (
        <div className="fitness-detail">
          <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™</h3>
          <div>
            <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™:</strong> {fitnessDetail.fit_name}
          </div>
          {/* Other fitness details can be added here */}
        </div>
      )}
    </div>
  );
};

// Other Tab Components (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏Å‡πà‡∏≠‡∏ô)
const DashboardTab = ({ data }) => (
  <div className="dashboard-content">
    <h2>üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö</h2>
    <div className="dashboard-stats">
      <div className="stat-card">
        <h3>üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</h3>
        <div className="stat-number">{data.users.length}</div>
        <div className="stat-label">‡∏Ñ‡∏ô</div>
      </div>
      <div className="stat-card">
        <h3>ü§ù ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</h3>
        <div className="stat-number">{data.partners.length}</div>
        <div className="stat-label">‡∏£‡∏≤‡∏¢</div>
      </div>
      <div className="stat-card">
        <h3>üìÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h3>
        <div className="stat-number">{data.bookings.length}</div>
        <div className="stat-label">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
      </div>
      <div className="stat-card">
        <h3>‚≠ê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</h3>
        <div className="stat-number">{data.reviews.length}</div>
        <div className="stat-label">‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</div>
      </div>
    </div>
  </div>
);

const UsersTab = ({ data }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('');
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const filteredUsers = data?.users?.filter(user => {
    const matchesSearch = !searchTerm || 
      user.username?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.useremail?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.full_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.usertel?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = !filterStatus || 
      (filterStatus === 'active' && user.status !== 'inactive') ||
      (filterStatus === 'inactive' && user.status === 'inactive');
    
    return matchesSearch && matchesStatus;
  }) || [];

  const handleDeleteUser = async (userId) => {
    if (!window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;
    
    try {
      // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      alert(`‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID: ${userId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    } catch (error) {
      console.error('Error deleting user:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ');
    }
  };

  const handleToggleStatus = async (userId, currentStatus) => {
    const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
    
    try {
      // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      alert(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô ${newStatus} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    } catch (error) {
      console.error('Error updating user status:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
    }
  };

  return (
    <div className="users-content">
      <h2>üë• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h2>
      <div className="section">
        <div className="admin-stats">
          <div className="stats-card">
            <div className="stats-number">{data?.users?.length || 0}</div>
            <div className="stats-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
          </div>
          <div className="stats-card">
            <div className="stats-number">{filteredUsers.length}</div>
            <div className="stats-label">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á</div>
          </div>
          <div className="stats-card">
            <div className="stats-number">
              {data?.users?.filter(user => {
                const today = new Date().toDateString();
                const userDate = new Date(user.created_at).toDateString();
                return today === userDate;
              }).length || 0}
            </div>
            <div className="stats-label">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
          </div>
          <div className="stats-card">
            <div className="stats-number">
              {data?.users?.filter(user => user.status !== 'inactive').length || 0}
            </div>
            <div className="stats-label">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà</div>
          </div>
        </div>
        
        <div className="data-management">
          <div className="section-header">
            <h3>üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>
            <div className="action-buttons">
              <button className="btn-add">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà</button>
              <button className="btn-export">üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
            </div>
          </div>
          
        <div className="search-filter-container">
          <div className="search-section">
            <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
              <input 
                type="text" 
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)..." 
                className="search-input"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{ flex: 1 }}
              />
              <select 
                className="search-input"
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                style={{ width: '200px' }}
              >
                <option value="">üîç ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                <option value="active">‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà</option>
                <option value="inactive">‚ùå ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>
              </select>
              <button className="search-button">
                üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
              </button>
            </div>
          </div>
        </div>

          <div className="data-table">
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</th>
                  <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°</th>
                  <th>‡∏≠‡∏≤‡∏¢‡∏∏</th>
                  <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                  <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {filteredUsers.length > 0 ? (
                  filteredUsers.map((user, index) => (
                    <tr key={user.user_uid || index}>
                      <td>{user.user_uid || `U${String(index + 1).padStart(3, '0')}`}</td>
                      <td>
                        <div className="user-info">
                          <div className="user-avatar">
                            {user.profile_image ? (
                              <img src={user.profile_image} alt="Avatar" className="user-avatar" />
                            ) : (
                              <div className="user-avatar" style={{
                                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                                color: 'white',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                fontSize: '1.2rem',
                                fontWeight: 'bold'
                              }}>üë§</div>
                            )}
                          </div>
                          <div className="user-details">
                            <h4>{user.username || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</h4>
                            <p>{user.useremail || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•'}</p>
                          </div>
                        </div>
                      </td>
                      <td>{user.useremail || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                      <td>{user.full_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                      <td>{user.userage ? `${user.userage} ‡∏õ‡∏µ` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                      <td>{user.usertel || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                      <td>{user.created_at ? new Date(user.created_at).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
                      <td>
                        <span className={`status-badge ${user.status === 'inactive' ? 'status-inactive' : 'status-active'}`}>
                          {user.status === 'inactive' ? '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà'}
                        </span>
                      </td>
                      <td>
                        <div className="action-buttons">
                          <button className="btn-view">‡∏î‡∏π</button>
                          <button className="btn-edit">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                          <button 
                            className={`btn-toggle ${user.status === 'inactive' ? 'btn-activate' : 'btn-deactivate'}`}
                            onClick={() => handleToggleStatus(user.user_uid, user.status || 'active')}
                          >
                            {user.status === 'inactive' ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ'}
                          </button>
                          <button 
                            className="btn-delete"
                            onClick={() => handleDeleteUser(user.user_uid)}
                          >
                            ‡∏•‡∏ö
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="9" style={{ textAlign: 'center', padding: '2rem' }}>
                      <div>
                        <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
                        {data?.users?.length === 0 && (
                          <button className="btn-add">+ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏Å</button>
                        )}
                      </div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
          
          <div className="user-actions">
            <div className="bulk-actions">
              <h4>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°</h4>
              <select className="bulk-select">
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
                <option value="activate">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>
                <option value="deactivate">‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>
                <option value="delete">‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</option>
                <option value="export">‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</option>
              </select>
              <button className="btn-apply">‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</button>
            </div>
            
            <div className="user-insights">
              <h4>üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h4>
              <div className="insights-grid">
                <div className="insight-item">
                  <span className="insight-label">‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:</span>
                  <span className="insight-value">
                    {data?.users?.length > 0 ? 
                      Math.round(data.users.reduce((sum, user) => sum + (parseInt(user.userage) || 0), 0) / data.users.length) + ' ‡∏õ‡∏µ'
                      : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
                    }
                  </span>
                </div>
                <div className="insight-item">
                  <span className="insight-label">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:</span>
                  <span className="insight-value">
                    {data?.users?.filter(user => {
                      const thisMonth = new Date().getMonth();
                      const userMonth = new Date(user.created_at).getMonth();
                      return thisMonth === userMonth;
                    }).length || 0} ‡∏Ñ‡∏ô
                  </span>
                </div>
                <div className="insight-item">
                  <span className="insight-label">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</span>
                  <span className="insight-value">
                    {data?.users?.length > 0 ? 
                      Math.round((data.users.filter(user => user.status !== 'inactive').length / data.users.length) * 100) + '%'
                      : '0%'
                    }
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const RegistrationTab = ({ data }) => (
  <div className="registration-content">
    <h2>üìù ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>
    <div className="section">
      <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</p>
    </div>
  </div>
);

const BookingsTab = () => {
  const [bookings, setBookings] = useState([]);
  const [filteredBookings, setFilteredBookings] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [dateFilter, setDateFilter] = useState('');
  const [loading, setLoading] = useState(false);
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [selectedBooking, setSelectedBooking] = useState(null);

  // Mock booking data - ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Supabase
  useEffect(() => {
    loadBookings();
  }, []);

  const loadBookings = async () => {
    setLoading(true);
    try {
      // Mock data - ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const mockBookings = [
        {
          id: 'BK001',
          user_name: '‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
          user_email: 'somchai@email.com',
          fitness_name: 'PJ Fitness Ladprao',
          service_type: 'Personal Training',
          booking_date: '2025-10-01',
          booking_time: '09:00',
          duration: '60 ‡∏ô‡∏≤‡∏ó‡∏µ',
          price: 800,
          status: 'confirmed',
          created_at: '2025-09-28T10:30:00Z',
          notes: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á'
        },
        {
          id: 'BK002',
          user_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏°‡∏≤‡∏•‡∏µ ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°',
          user_email: 'malee@email.com',
          fitness_name: 'PJ Fitness Sukhumvit',
          service_type: 'Group Class - Yoga',
          booking_date: '2025-10-02',
          booking_time: '18:00',
          duration: '90 ‡∏ô‡∏≤‡∏ó‡∏µ',
          price: 350,
          status: 'pending',
          created_at: '2025-09-29T14:15:00Z',
          notes: ''
        },
        {
          id: 'BK003',
          user_name: '‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ó‡∏¢‡πå ‡∏£‡∏±‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
          user_email: 'wit@email.com',
          fitness_name: 'PJ Fitness Silom',
          service_type: 'Swimming Pool',
          booking_date: '2025-10-01',
          booking_time: '07:00',
          duration: '120 ‡∏ô‡∏≤‡∏ó‡∏µ',
          price: 200,
          status: 'completed',
          created_at: '2025-09-27T16:45:00Z',
          notes: '‡∏ä‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏≤‡∏ú‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠'
        },
        {
          id: 'BK004',
          user_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡∏û‡∏¢‡πå ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á',
          user_email: 'namtip@email.com',
          fitness_name: 'PJ Fitness Thonglor',
          service_type: 'Massage & Spa',
          booking_date: '2025-10-03',
          booking_time: '15:30',
          duration: '90 ‡∏ô‡∏≤‡∏ó‡∏µ',
          price: 1200,
          status: 'cancelled',
          created_at: '2025-09-30T08:20:00Z',
          notes: '‡∏Ç‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏ò‡∏∏‡∏£‡∏∞'
        }
      ];
      
      setBookings(mockBookings);
      setFilteredBookings(mockBookings);
    } catch (error) {
      console.error('Error loading bookings:', error);
    }
    setLoading(false);
  };

  // Filter bookings based on search and filters
  useEffect(() => {
    let filtered = bookings;

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(booking =>
        booking.user_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        booking.user_email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        booking.fitness_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        booking.service_type.toLowerCase().includes(searchTerm.toLowerCase()) ||
        booking.id.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Status filter
    if (statusFilter) {
      filtered = filtered.filter(booking => booking.status === statusFilter);
    }

    // Date filter
    if (dateFilter) {
      filtered = filtered.filter(booking => booking.booking_date === dateFilter);
    }

    setFilteredBookings(filtered);
  }, [bookings, searchTerm, statusFilter, dateFilter]);

  const getStatusBadge = (status) => {
    const statusMap = {
      pending: { text: '‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô', class: 'status-pending' },
      confirmed: { text: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß', class: 'status-confirmed' },
      completed: { text: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', class: 'status-completed' },
      cancelled: { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', class: 'status-cancelled' }
    };
    
    const statusInfo = statusMap[status] || { text: status, class: 'status-unknown' };
    return <span className={`status-badge ${statusInfo.class}`}>{statusInfo.text}</span>;
  };

  const handleStatusChange = async (bookingId, newStatus) => {
    try {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô state (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
      setBookings(prev => prev.map(booking =>
        booking.id === bookingId ? { ...booking, status: newStatus } : booking
      ));
      alert(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô "${newStatus}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    } catch (error) {
      console.error('Error updating booking status:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
    }
  };

  const handleViewBooking = (booking) => {
    setSelectedBooking(booking);
    setShowBookingModal(true);
  };

  const BookingDetailModal = ({ booking, onClose }) => {
    if (!booking) return null;

    return (
      <div className="modal-overlay" onClick={onClose}>
        <div className="modal-content" onClick={e => e.stopPropagation()}>
          <div className="modal-header">
            <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á #{booking.id}</h3>
            <button className="modal-close" onClick={onClose}>√ó</button>
          </div>
          <div className="modal-body">
            <div className="booking-details">
              <div className="detail-row">
                <strong>‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:</strong> {booking.user_name}
              </div>
              <div className="detail-row">
                <strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> {booking.user_email}
              </div>
              <div className="detail-row">
                <strong>‡∏™‡∏≤‡∏Ç‡∏≤:</strong> {booking.fitness_name}
              </div>
              <div className="detail-row">
                <strong>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</strong> {booking.service_type}
              </div>
              <div className="detail-row">
                <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</strong> {new Date(booking.booking_date).toLocaleDateString('th-TH')}
              </div>
              <div className="detail-row">
                <strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> {booking.booking_time}
              </div>
              <div className="detail-row">
                <strong>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</strong> {booking.duration}
              </div>
              <div className="detail-row">
                <strong>‡∏£‡∏≤‡∏Ñ‡∏≤:</strong> ‡∏ø{booking.price.toLocaleString()}
              </div>
              <div className="detail-row">
                <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {getStatusBadge(booking.status)}
              </div>
              <div className="detail-row">
                <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:</strong> {new Date(booking.created_at).toLocaleString('th-TH')}
              </div>
              {booking.notes && (
                <div className="detail-row">
                  <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {booking.notes}
                </div>
              )}
            </div>
          </div>
          <div className="modal-footer">
            <button className="btn-close" onClick={onClose}>‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="bookings-content">
      <h2>üìÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</h2>
      
      {/* Stats Cards */}
      <div className="admin-stats">
        <div className="stat-card">
          <h3>‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>
          <span className="stat-number">{bookings.length}</span>
        </div>
        <div className="stat-card">
          <h3>‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</h3>
          <span className="stat-number">{bookings.filter(b => b.status === 'pending').length}</span>
        </div>
        <div className="stat-card">
          <h3>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</h3>
          <span className="stat-number">{bookings.filter(b => b.status === 'confirmed').length}</span>
        </div>
        <div className="stat-card">
          <h3>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°</h3>
          <span className="stat-number">‡∏ø{bookings.filter(b => b.status === 'completed').reduce((sum, b) => sum + b.price, 0).toLocaleString()}</span>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="booking-controls">
        <div className="search-section">
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏™‡∏≤‡∏Ç‡∏≤, ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£)..."
            className="search-input"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <select
            className="filter-select"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
            <option value="pending">‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</option>
            <option value="confirmed">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</option>
            <option value="completed">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</option>
            <option value="cancelled">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
          </select>
          <input
            type="date"
            className="filter-date"
            value={dateFilter}
            onChange={(e) => setDateFilter(e.target.value)}
          />
          <button className="btn-reset" onClick={() => {
            setSearchTerm('');
            setStatusFilter('');
            setDateFilter('');
          }}>
            ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
          </button>
        </div>
      </div>

      {/* Bookings Table */}
      <div className="data-table">
        {loading ? (
          <div className="loading-message">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
        ) : (
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á</th>
                <th>‡∏™‡∏≤‡∏Ç‡∏≤</th>
                <th>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</th>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                <th>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {filteredBookings.length > 0 ? (
                filteredBookings.map((booking) => (
                  <tr key={booking.id}>
                    <td>{booking.id}</td>
                    <td>
                      <div>
                        <div style={{ fontWeight: '500' }}>{booking.user_name}</div>
                        <div style={{ fontSize: '0.8rem', color: '#666' }}>{booking.user_email}</div>
                      </div>
                    </td>
                    <td>{booking.fitness_name}</td>
                    <td>{booking.service_type}</td>
                    <td>{new Date(booking.booking_date).toLocaleDateString('th-TH')}</td>
                    <td>{booking.booking_time}</td>
                    <td>‡∏ø{booking.price.toLocaleString()}</td>
                    <td>{getStatusBadge(booking.status)}</td>
                    <td>
                      <div className="action-buttons">
                        <button
                          className="btn-view"
                          onClick={() => handleViewBooking(booking)}
                        >
                          ‡∏î‡∏π
                        </button>
                        {booking.status === 'pending' && (
                          <button
                            className="btn-confirm"
                            onClick={() => handleStatusChange(booking.id, 'confirmed')}
                          >
                            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                          </button>
                        )}
                        {booking.status === 'confirmed' && (
                          <button
                            className="btn-complete"
                            onClick={() => handleStatusChange(booking.id, 'completed')}
                          >
                            ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                          </button>
                        )}
                        {(booking.status === 'pending' || booking.status === 'confirmed') && (
                          <button
                            className="btn-cancel"
                            onClick={() => handleStatusChange(booking.id, 'cancelled')}
                          >
                            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="9" style={{ textAlign: 'center', padding: '2rem' }}>
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        )}
      </div>

      {/* Booking Detail Modal */}
      {showBookingModal && (
        <BookingDetailModal
          booking={selectedBooking}
          onClose={() => {
            setShowBookingModal(false);
            setSelectedBooking(null);
          }}
        />
      )}
    </div>
  );
};

const PaymentsTab = () => {
  const [payments, setPayments] = useState([]);
  const [filteredPayments, setFilteredPayments] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [dateFilter, setDateFilter] = useState('');
  const [loading, setLoading] = useState(false);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedPayment, setSelectedPayment] = useState(null);
  const [revenueSettings, setRevenueSettings] = useState({
    appCommission: 10, // ‡πÅ‡∏≠‡∏û‡πÄ‡∏Å‡πá‡∏ö 10%
    partnerShare: 90   // ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ 90%
  });

  useEffect(() => {
    loadPayments();
  }, []);

  const loadPayments = async () => {
    setLoading(true);
    try {
      // Mock payment data - ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Supabase
      const mockPayments = [
        {
          id: 'PAY001',
          booking_id: 'BK001',
          user_name: '‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
          user_email: 'somchai@email.com',
          fitness_name: 'PJ Fitness Ladprao',
          partner_id: 'ladprao',
          service_type: 'Personal Training',
          total_amount: 800,
          app_commission: 80,  // 10%
          partner_amount: 720, // 90%
          payment_method: 'credit_card',
          payment_status: 'completed',
          transaction_id: 'TXN_001_20251001',
          created_at: '2025-10-01T09:30:00Z',
          completed_at: '2025-10-01T09:31:00Z',
          partner_paid: true,
          partner_paid_at: '2025-10-01T18:00:00Z'
        },
        {
          id: 'PAY002',
          booking_id: 'BK002',
          user_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏°‡∏≤‡∏•‡∏µ ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°',
          user_email: 'malee@email.com',
          fitness_name: 'PJ Fitness Sukhumvit',
          partner_id: 'sukhumvit',
          service_type: 'Group Class - Yoga',
          total_amount: 350,
          app_commission: 35,
          partner_amount: 315,
          payment_method: 'promptpay',
          payment_status: 'completed',
          transaction_id: 'TXN_002_20251002',
          created_at: '2025-10-02T18:15:00Z',
          completed_at: '2025-10-02T18:16:00Z',
          partner_paid: false,
          partner_paid_at: null
        },
        {
          id: 'PAY003',
          booking_id: 'BK003',
          user_name: '‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ó‡∏¢‡πå ‡∏£‡∏±‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
          user_email: 'wit@email.com',
          fitness_name: 'PJ Fitness Silom',
          partner_id: 'silom',
          service_type: 'Swimming Pool',
          total_amount: 200,
          app_commission: 20,
          partner_amount: 180,
          payment_method: 'bank_transfer',
          payment_status: 'pending',
          transaction_id: 'TXN_003_20251001',
          created_at: '2025-10-01T07:00:00Z',
          completed_at: null,
          partner_paid: false,
          partner_paid_at: null
        },
        {
          id: 'PAY004',
          booking_id: 'BK004',
          user_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡∏û‡∏¢‡πå ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á',
          user_email: 'namtip@email.com',
          fitness_name: 'PJ Fitness Thonglor',
          partner_id: 'thonglor',
          service_type: 'Massage & Spa',
          total_amount: 1200,
          app_commission: 120,
          partner_amount: 1080,
          payment_method: 'credit_card',
          payment_status: 'failed',
          transaction_id: 'TXN_004_20251003',
          created_at: '2025-10-03T15:30:00Z',
          completed_at: null,
          partner_paid: false,
          partner_paid_at: null
        },
        {
          id: 'PAY005',
          booking_id: 'BK005',
          user_name: '‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏ó‡∏ò‡πå ‡∏™‡∏∏‡∏Ç‡πÉ‡∏™',
          user_email: 'prayut@email.com',
          fitness_name: 'PJ Fitness Chatuchak',
          partner_id: 'chatuchak',
          service_type: 'Personal Training',
          total_amount: 1000,
          app_commission: 100,
          partner_amount: 900,
          payment_method: 'wallet',
          payment_status: 'completed',
          transaction_id: 'TXN_005_20250930',
          created_at: '2025-09-30T16:45:00Z',
          completed_at: '2025-09-30T16:46:00Z',
          partner_paid: true,
          partner_paid_at: '2025-10-01T09:00:00Z'
        }
      ];
      
      setPayments(mockPayments);
      setFilteredPayments(mockPayments);
    } catch (error) {
      console.error('Error loading payments:', error);
    }
    setLoading(false);
  };

  // Filter payments
  useEffect(() => {
    let filtered = payments;

    if (searchTerm) {
      filtered = filtered.filter(payment =>
        payment.user_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        payment.user_email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        payment.fitness_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        payment.transaction_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
        payment.id.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (statusFilter) {
      filtered = filtered.filter(payment => payment.payment_status === statusFilter);
    }

    if (dateFilter) {
      filtered = filtered.filter(payment => 
        payment.created_at.startsWith(dateFilter)
      );
    }

    setFilteredPayments(filtered);
  }, [payments, searchTerm, statusFilter, dateFilter]);

  const getPaymentStatusBadge = (status) => {
    const statusMap = {
      pending: { text: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', class: 'payment-pending' },
      completed: { text: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', class: 'payment-completed' },
      failed: { text: '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', class: 'payment-failed' },
      refunded: { text: '‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß', class: 'payment-refunded' }
    };
    
    const statusInfo = statusMap[status] || { text: status, class: 'payment-unknown' };
    return <span className={`payment-badge ${statusInfo.class}`}>{statusInfo.text}</span>;
  };

  const getPaymentMethodText = (method) => {
    const methodMap = {
      credit_card: '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
      promptpay: 'PromptPay',
      bank_transfer: '‡πÇ‡∏≠‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
      wallet: '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô'
    };
    return methodMap[method] || method;
  };

  const handlePayPartner = async (paymentId) => {
    try {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå
      setPayments(prev => prev.map(payment =>
        payment.id === paymentId 
          ? { 
              ...payment, 
              partner_paid: true, 
              partner_paid_at: new Date().toISOString() 
            }
          : payment
      ));
      alert('‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
      console.error('Error paying partner:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô');
    }
  };

  const handleRefund = async (paymentId) => {
    if (!window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;
    
    try {
      setPayments(prev => prev.map(payment =>
        payment.id === paymentId 
          ? { ...payment, payment_status: 'refunded' }
          : payment
      ));
      alert('‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
      console.error('Error processing refund:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô');
    }
  };

  const calculateTotals = () => {
    const completedPayments = filteredPayments.filter(p => p.payment_status === 'completed');
    const totalRevenue = completedPayments.reduce((sum, p) => sum + p.total_amount, 0);
    const totalAppCommission = completedPayments.reduce((sum, p) => sum + p.app_commission, 0);
    const totalPartnerAmount = completedPayments.reduce((sum, p) => sum + p.partner_amount, 0);
    const pendingPartnerPayments = completedPayments.filter(p => !p.partner_paid).reduce((sum, p) => sum + p.partner_amount, 0);

    return {
      totalRevenue,
      totalAppCommission,
      totalPartnerAmount,
      pendingPartnerPayments,
      transactionCount: completedPayments.length
    };
  };

  const totals = calculateTotals();

  const PaymentDetailModal = ({ payment, onClose }) => {
    if (!payment) return null;

    return (
      <div className="modal-overlay" onClick={onClose}>
        <div className="modal-content payment-modal" onClick={e => e.stopPropagation()}>
          <div className="modal-header">
            <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô #{payment.id}</h3>
            <button className="modal-close" onClick={onClose}>√ó</button>
          </div>
          <div className="modal-body">
            <div className="payment-details">
              <div className="detail-section">
                <h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h4>
                <div className="detail-row">
                  <strong>‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:</strong> {payment.booking_id}
                </div>
                <div className="detail-row">
                  <strong>‡∏£‡∏´‡∏±‡∏™‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°:</strong> {payment.transaction_id}
                </div>
                <div className="detail-row">
                  <strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</strong> {getPaymentMethodText(payment.payment_method)}
                </div>
                <div className="detail-row">
                  <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {getPaymentStatusBadge(payment.payment_status)}
                </div>
              </div>

              <div className="detail-section">
                <h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h4>
                <div className="detail-row">
                  <strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {payment.user_name}
                </div>
                <div className="detail-row">
                  <strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> {payment.user_email}
                </div>
                <div className="detail-row">
                  <strong>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</strong> {payment.service_type}
                </div>
                <div className="detail-row">
                  <strong>‡∏™‡∏≤‡∏Ç‡∏≤:</strong> {payment.fitness_name}
                </div>
              </div>

              <div className="detail-section">
                <h4>‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</h4>
                <div className="revenue-breakdown">
                  <div className="revenue-row total">
                    <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</span>
                    <span>‡∏ø{payment.total_amount.toLocaleString()}</span>
                  </div>
                  <div className="revenue-row app">
                    <span>‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏≠‡∏û ({revenueSettings.appCommission}%):</span>
                    <span>‡∏ø{payment.app_commission.toLocaleString()}</span>
                  </div>
                  <div className="revenue-row partner">
                    <span>‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå ({revenueSettings.partnerShare}%):</span>
                    <span>‡∏ø{payment.partner_amount.toLocaleString()}</span>
                  </div>
                </div>
              </div>

              <div className="detail-section">
                <h4>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô</h4>
                <div className="detail-row">
                  <strong>‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå:</strong> 
                  <span className={payment.partner_paid ? 'status-paid' : 'status-unpaid'}>
                    {payment.partner_paid ? '‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢'}
                  </span>
                </div>
                {payment.partner_paid_at && (
                  <div className="detail-row">
                    <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢:</strong> {new Date(payment.partner_paid_at).toLocaleString('th-TH')}
                  </div>
                )}
              </div>

              <div className="detail-section">
                <h4>‡πÄ‡∏ß‡∏•‡∏≤</h4>
                <div className="detail-row">
                  <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:</strong> {new Date(payment.created_at).toLocaleString('th-TH')}
                </div>
                {payment.completed_at && (
                  <div className="detail-row">
                    <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:</strong> {new Date(payment.completed_at).toLocaleString('th-TH')}
                  </div>
                )}
              </div>
            </div>
          </div>
          <div className="modal-footer">
            <button className="btn-close" onClick={onClose}>‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="payments-content">
      <h2>üí≥ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>

      {/* Revenue Summary */}
      <div className="revenue-summary">
        <div className="revenue-card total">
          <div className="revenue-icon">üí∞</div>
          <div className="revenue-content">
            <h3>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°</h3>
            <div className="revenue-value">‡∏ø{totals.totalRevenue.toLocaleString()}</div>
            <div className="revenue-count">{totals.transactionCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
          </div>
        </div>

        <div className="revenue-card app">
          <div className="revenue-icon">üì±</div>
          <div className="revenue-content">
            <h3>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏≠‡∏û ({revenueSettings.appCommission}%)</h3>
            <div className="revenue-value">‡∏ø{totals.totalAppCommission.toLocaleString()}</div>
            <div className="revenue-count">‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏≠‡∏û</div>
          </div>
        </div>

        <div className="revenue-card partner">
          <div className="revenue-icon">üè¢</div>
          <div className="revenue-content">
            <h3>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå ({revenueSettings.partnerShare}%)</h3>
            <div className="revenue-value">‡∏ø{totals.totalPartnerAmount.toLocaleString()}</div>
            <div className="revenue-count">‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</div>
          </div>
        </div>

        <div className="revenue-card pending">
          <div className="revenue-icon">‚è≥</div>
          <div className="revenue-content">
            <h3>‡∏£‡∏≠‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</h3>
            <div className="revenue-value">‡∏ø{totals.pendingPartnerPayments.toLocaleString()}</div>
            <div className="revenue-count">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢</div>
          </div>
        </div>
      </div>

      {/* Controls */}
      <div className="payment-controls">
        <div className="search-section">
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏£‡∏´‡∏±‡∏™‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°)..."
            className="search-input"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <select
            className="filter-select"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
            <option value="pending">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
            <option value="completed">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</option>
            <option value="failed">‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</option>
            <option value="refunded">‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß</option>
          </select>
          <input
            type="date"
            className="filter-date"
            value={dateFilter}
            onChange={(e) => setDateFilter(e.target.value)}
          />
          <button className="btn-reset" onClick={() => {
            setSearchTerm('');
            setStatusFilter('');
            setDateFilter('');
          }}>
            ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
          </button>
        </div>
      </div>

      {/* Payments Table */}
      <div className="data-table">
        {loading ? (
          <div className="loading-message">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
        ) : (
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                <th>‡∏™‡∏≤‡∏Ç‡∏≤</th>
                <th>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</th>
                <th>‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏≠‡∏û</th>
                <th>‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</th>
                <th>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</th>
                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {filteredPayments.length > 0 ? (
                filteredPayments.map((payment) => (
                  <tr key={payment.id}>
                    <td>{payment.id}</td>
                    <td>
                      <div>
                        <div style={{ fontWeight: '500' }}>{payment.user_name}</div>
                        <div style={{ fontSize: '0.8rem', color: '#666' }}>{payment.service_type}</div>
                      </div>
                    </td>
                    <td>{payment.fitness_name}</td>
                    <td className="currency">‡∏ø{payment.total_amount.toLocaleString()}</td>
                    <td className="currency app-amount">‡∏ø{payment.app_commission.toLocaleString()}</td>
                    <td className="currency partner-amount">‡∏ø{payment.partner_amount.toLocaleString()}</td>
                    <td>{getPaymentMethodText(payment.payment_method)}</td>
                    <td>{getPaymentStatusBadge(payment.payment_status)}</td>
                    <td>
                      {payment.payment_status === 'completed' ? (
                        payment.partner_paid ? (
                          <span className="status-paid">‚úì ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß</span>
                        ) : (
                          <button
                            className="btn-pay-partner"
                            onClick={() => handlePayPartner(payment.id)}
                          >
                            ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
                          </button>
                        )
                      ) : (
                        <span className="status-na">-</span>
                      )}
                    </td>
                    <td>
                      <div className="action-buttons">
                        <button
                          className="btn-view"
                          onClick={() => {
                            setSelectedPayment(payment);
                            setShowPaymentModal(true);
                          }}
                        >
                          ‡∏î‡∏π
                        </button>
                        {payment.payment_status === 'completed' && !payment.partner_paid && (
                          <button
                            className="btn-refund"
                            onClick={() => handleRefund(payment.id)}
                          >
                            ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="10" style={{ textAlign: 'center', padding: '2rem' }}>
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        )}
      </div>

      {/* Payment Detail Modal */}
      {showPaymentModal && (
        <PaymentDetailModal
          payment={selectedPayment}
          onClose={() => {
            setShowPaymentModal(false);
            setSelectedPayment(null);
          }}
        />
      )}

      {/* Revenue Settings */}
      <div className="revenue-settings">
        <h3>‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</h3>
        <div className="settings-form">
          <div className="setting-item">
            <label>‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏≠‡∏û:</label>
            <input
              type="number"
              value={revenueSettings.appCommission}
              onChange={(e) => {
                const appPercent = parseInt(e.target.value);
                setRevenueSettings({
                  appCommission: appPercent,
                  partnerShare: 100 - appPercent
                });
              }}
              min="0"
              max="100"
            />
            <span>%</span>
          </div>
          <div className="setting-item">
            <label>‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå:</label>
            <input
              type="number"
              value={revenueSettings.partnerShare}
              readOnly
              className="readonly"
            />
            <span>%</span>
          </div>
          <div className="setting-note">
            <small>üí° ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡πÅ‡∏≠‡∏û‡πÄ‡∏Å‡πá‡∏ö 10%, ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ 90%</small>
          </div>
        </div>
      </div>
    </div>
  );
};

const ReviewsTab = () => {
  const [reviews, setReviews] = useState([]);
  const [filteredReviews, setFilteredReviews] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [ratingFilter, setRatingFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [fitnessFilter, setFitnessFilter] = useState('');
  const [loading, setLoading] = useState(false);
  const [showReviewModal, setShowReviewModal] = useState(false);
  const [selectedReview, setSelectedReview] = useState(null);

  // Mock fitness branches
  const fitnessBranches = [
    { id: 'all', name: '‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤' },
    { id: 'ladprao', name: 'PJ Fitness Ladprao' },
    { id: 'sukhumvit', name: 'PJ Fitness Sukhumvit' },
    { id: 'silom', name: 'PJ Fitness Silom' },
    { id: 'thonglor', name: 'PJ Fitness Thonglor' },
    { id: 'chatuchak', name: 'PJ Fitness Chatuchak' }
  ];

  useEffect(() => {
    loadReviews();
  }, []);

  const loadReviews = async () => {
    setLoading(true);
    try {
      // Mock review data - ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Supabase
      const mockReviews = [
        {
          id: 'REV001',
          booking_id: 'BK001',
          user_name: '‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
          user_email: 'somchai@email.com',
          user_avatar: 'üë®‚Äçüíº',
          fitness_name: 'PJ Fitness Ladprao',
          fitness_id: 'ladprao',
          service_type: 'Personal Training',
          trainer_name: '‡πÇ‡∏Ñ‡πâ‡∏ä‡∏≠‡∏≤‡∏£‡πå‡∏°',
          rating: 5,
          title: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡πÇ‡∏Ñ‡πâ‡∏ä‡πÉ‡∏™‡πà‡πÉ‡∏à‡∏°‡∏≤‡∏Å',
          comment: '‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö ‡πÇ‡∏Ñ‡πâ‡∏ä‡∏≠‡∏≤‡∏£‡πå‡∏°‡∏™‡∏≠‡∏ô‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡∏µ ‡πÜ ‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡∏à‡∏∞‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö',
          images: ['gym1.jpg', 'trainer1.jpg'],
          status: 'approved',
          created_at: '2025-10-01T10:30:00Z',
          updated_at: '2025-10-01T11:00:00Z',
          admin_response: null,
          helpful_count: 12,
          report_count: 0
        },
        {
          id: 'REV002',
          booking_id: 'BK002',
          user_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏°‡∏≤‡∏•‡∏µ ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°',
          user_email: 'malee@email.com',
          user_avatar: 'üë©‚ÄçüíÑ',
          fitness_name: 'PJ Fitness Sukhumvit',
          fitness_id: 'sukhumvit',
          service_type: 'Group Class - Yoga',
          trainer_name: '‡∏Ñ‡∏£‡∏π‡∏¢‡∏¥‡∏á',
          rating: 4,
          title: '‡∏Ñ‡∏•‡∏≤‡∏™‡πÇ‡∏¢‡∏Ñ‡∏∞‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡∏ô‡πâ‡∏≠‡∏¢',
          comment: '‡∏ä‡∏≠‡∏ö‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏Ñ‡∏•‡∏≤‡∏™‡πÇ‡∏¢‡∏Ñ‡∏∞‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏£‡∏π‡∏¢‡∏¥‡∏á‡∏™‡∏≠‡∏ô‡∏î‡∏µ ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ ‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≠‡∏î‡πÑ‡∏Å‡∏• ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ‡∏à‡∏∞‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
          images: ['yoga1.jpg'],
          status: 'pending',
          created_at: '2025-10-02T19:15:00Z',
          updated_at: '2025-10-02T19:15:00Z',
          admin_response: null,
          helpful_count: 8,
          report_count: 0
        },
        {
          id: 'REV003',
          booking_id: 'BK003',
          user_name: '‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ó‡∏¢‡πå ‡∏£‡∏±‡∏Å‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
          user_email: 'wit@email.com',
          user_avatar: 'üèä‚Äç‚ôÇÔ∏è',
          fitness_name: 'PJ Fitness Silom',
          fitness_id: 'silom',
          service_type: 'Swimming Pool',
          trainer_name: '-',
          rating: 3,
          title: '‡∏™‡∏£‡∏∞‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÇ‡∏≠‡πÄ‡∏Ñ ‡πÅ‡∏ï‡πà‡∏ô‡πâ‡∏≥‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏¢‡πá‡∏ô',
          comment: '‡∏™‡∏£‡∏∞‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö',
          images: [],
          status: 'approved',
          created_at: '2025-10-01T08:00:00Z',
          updated_at: '2025-10-01T14:30:00Z',
          admin_response: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô',
          helpful_count: 5,
          report_count: 0
        },
        {
          id: 'REV004',
          booking_id: 'BK004',
          user_name: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ô‡πâ‡∏≥‡∏ó‡∏¥‡∏û‡∏¢‡πå ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á',
          user_email: 'namtip@email.com',
          user_avatar: 'üíÜ‚Äç‚ôÄÔ∏è',
          fitness_name: 'PJ Fitness Thonglor',
          fitness_id: 'thonglor',
          service_type: 'Massage & Spa',
          trainer_name: '‡∏´‡∏°‡∏≠‡∏ô‡∏ß‡∏î ‡∏™‡∏∏‡∏Ç‡πÉ‡∏à',
          rating: 2,
          title: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á',
          comment: '‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏°‡∏≤‡∏Å ‡∏ö‡∏∏‡∏Å‡∏ô‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 15:30 ‡πÅ‡∏ï‡πà‡∏£‡∏≠‡∏à‡∏ô‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö 16:00 ‡∏´‡∏°‡∏≠‡∏ô‡∏ß‡∏î‡∏î‡∏π‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡∏ô‡∏ß‡∏î‡πÅ‡∏£‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ó‡∏≥‡πÄ‡∏à‡πá‡∏ö ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏á‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏Ñ‡∏∏‡πâ‡∏°',
          images: [],
          status: 'flagged',
          created_at: '2025-10-03T16:45:00Z',
          updated_at: '2025-10-03T16:45:00Z',
          admin_response: null,
          helpful_count: 2,
          report_count: 1
        },
        {
          id: 'REV005',
          booking_id: 'BK005',
          user_name: '‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏ó‡∏ò‡πå ‡∏™‡∏∏‡∏Ç‡πÉ‡∏™',
          user_email: 'prayut@email.com',
          user_avatar: 'üí™',
          fitness_name: 'PJ Fitness Chatuchak',
          fitness_id: 'chatuchak',
          service_type: 'Personal Training',
          trainer_name: '‡πÇ‡∏Ñ‡πâ‡∏ä‡πÅ‡∏ö‡∏á‡∏Ñ‡πå',
          rating: 5,
          title: '‡πÇ‡∏Ñ‡πâ‡∏ä‡πÅ‡∏ö‡∏á‡∏Ñ‡πå‡πÄ‡∏ó‡∏û‡∏°‡∏≤‡∏Å! ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏•‡∏¢',
          comment: '‡πÇ‡∏Ñ‡πâ‡∏ä‡πÅ‡∏ö‡∏á‡∏Ñ‡πå‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏î‡∏µ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î ‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö',
          images: ['result1.jpg', 'result2.jpg'],
          status: 'approved',
          created_at: '2025-09-30T17:30:00Z',
          updated_at: '2025-09-30T18:00:00Z',
          admin_response: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à ‡πÄ‡∏£‡∏≤‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏≠‡πÉ‡∏à‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤',
          helpful_count: 15,
          report_count: 0
        },
        {
          id: 'REV006',
          booking_id: 'BK006',
          user_name: '‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡πÉ‡∏à‡∏£‡πâ‡∏≤‡∏¢',
          user_email: 'somak@email.com',
          user_avatar: 'üò†',
          fitness_name: 'PJ Fitness Ladprao',
          fitness_id: 'ladprao',
          service_type: 'Group Class - Zumba',
          trainer_name: '‡∏Ñ‡∏£‡∏π‡πÄ‡∏õ‡∏¥‡πâ‡∏•',
          rating: 1,
          title: '‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥!!!',
          comment: '‡∏´‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡∏Å‡∏°‡∏≤‡∏Å ‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏Ñ‡∏£‡∏π‡πÄ‡∏õ‡∏¥‡πâ‡∏•‡∏™‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏Å‡πà‡∏≤ ‡πÜ ‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏∏‡∏Å ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡πâ‡∏≠‡∏¢ ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏Ñ‡∏£‡∏°‡∏≤‡πÄ‡∏•‡∏¢!!!',
          images: [],
          status: 'rejected',
          created_at: '2025-09-29T20:00:00Z',
          updated_at: '2025-09-30T09:00:00Z',
          admin_response: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏î‡∏µ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÑ‡∏õ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
          helpful_count: 1,
          report_count: 3
        }
      ];
      
      setReviews(mockReviews);
      setFilteredReviews(mockReviews);
    } catch (error) {
      console.error('Error loading reviews:', error);
    }
    setLoading(false);
  };

  // Filter reviews
  useEffect(() => {
    let filtered = reviews;

    if (searchTerm) {
      filtered = filtered.filter(review =>
        review.user_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        review.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        review.comment.toLowerCase().includes(searchTerm.toLowerCase()) ||
        review.fitness_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        review.trainer_name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (ratingFilter) {
      filtered = filtered.filter(review => review.rating === parseInt(ratingFilter));
    }

    if (statusFilter) {
      filtered = filtered.filter(review => review.status === statusFilter);
    }

    if (fitnessFilter && fitnessFilter !== 'all') {
      filtered = filtered.filter(review => review.fitness_id === fitnessFilter);
    }

    setFilteredReviews(filtered);
  }, [reviews, searchTerm, ratingFilter, statusFilter, fitnessFilter]);

  const getStarRating = (rating) => {
    return '‚≠ê'.repeat(rating) + '‚òÜ'.repeat(5 - rating);
  };

  const getStatusBadge = (status) => {
    const statusMap = {
      pending: { text: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', class: 'review-pending' },
      approved: { text: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', class: 'review-approved' },
      rejected: { text: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò', class: 'review-rejected' },
      flagged: { text: '‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', class: 'review-flagged' }
    };
    
    const statusInfo = statusMap[status] || { text: status, class: 'review-unknown' };
    return <span className={`review-badge ${statusInfo.class}`}>{statusInfo.text}</span>;
  };

  const handleStatusChange = async (reviewId, newStatus, adminResponse = null) => {
    try {
      setReviews(prev => prev.map(review =>
        review.id === reviewId 
          ? { 
              ...review, 
              status: newStatus,
              admin_response: adminResponse,
              updated_at: new Date().toISOString()
            }
          : review
      ));
      alert(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏õ‡πá‡∏ô "${newStatus}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    } catch (error) {
      console.error('Error updating review status:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
    }
  };

  const handleReplyReview = async (reviewId, response) => {
    try {
      setReviews(prev => prev.map(review =>
        review.id === reviewId 
          ? { 
              ...review, 
              admin_response: response,
              updated_at: new Date().toISOString()
            }
          : review
      ));
      alert('‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error) {
      console.error('Error replying to review:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö');
    }
  };

  const calculateAverageRating = () => {
    const approvedReviews = filteredReviews.filter(r => r.status === 'approved');
    if (approvedReviews.length === 0) return 0;
    const total = approvedReviews.reduce((sum, r) => sum + r.rating, 0);
    return (total / approvedReviews.length).toFixed(1);
  };

  const getRatingDistribution = () => {
    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };
    filteredReviews.forEach(review => {
      distribution[review.rating]++;
    });
    return distribution;
  };

  const getReviewStats = () => {
    const total = filteredReviews.length;
    const pending = filteredReviews.filter(r => r.status === 'pending').length;
    const approved = filteredReviews.filter(r => r.status === 'approved').length;
    const flagged = filteredReviews.filter(r => r.status === 'flagged').length;
    const avgRating = calculateAverageRating();
    
    return { total, pending, approved, flagged, avgRating };
  };

  const stats = getReviewStats();
  const distribution = getRatingDistribution();

  const ReviewDetailModal = ({ review, onClose, onReply, onStatusChange }) => {
    const [replyText, setReplyText] = useState(review?.admin_response || '');
    const [isReplying, setIsReplying] = useState(false);

    if (!review) return null;

    const handleReply = () => {
      if (replyText.trim()) {
        onReply(review.id, replyText);
        setIsReplying(false);
        onClose();
      }
    };

    return (
      <div className="modal-overlay" onClick={onClose}>
        <div className="modal-content review-modal" onClick={e => e.stopPropagation()}>
          <div className="modal-header">
            <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß #{review.id}</h3>
            <button className="modal-close" onClick={onClose}>√ó</button>
          </div>
          <div className="modal-body">
            <div className="review-detail-content">
              <div className="review-header">
                <div className="user-info">
                  <span className="user-avatar">{review.user_avatar}</span>
                  <div>
                    <div className="user-name">{review.user_name}</div>
                    <div className="review-date">{new Date(review.created_at).toLocaleString('th-TH')}</div>
                  </div>
                </div>
                <div className="review-rating">
                  <span className="stars">{getStarRating(review.rating)}</span>
                  <span className="rating-number">({review.rating}/5)</span>
                </div>
              </div>

              <div className="review-content">
                <h4>{review.title}</h4>
                <p>{review.comment}</p>
              </div>

              <div className="review-meta">
                <div className="meta-item">
                  <strong>‡∏™‡∏≤‡∏Ç‡∏≤:</strong> {review.fitness_name}
                </div>
                <div className="meta-item">
                  <strong>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</strong> {review.service_type}
                </div>
                {review.trainer_name !== '-' && (
                  <div className="meta-item">
                    <strong>‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå:</strong> {review.trainer_name}
                  </div>
                )}
                <div className="meta-item">
                  <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {getStatusBadge(review.status)}
                </div>
                <div className="meta-item">
                  <strong>‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö:</strong> üëç {review.helpful_count} | üö© {review.report_count}
                </div>
              </div>

              <div className="admin-section">
                <h4>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</h4>
                
                {/* Status Actions */}
                <div className="status-actions">
                  {review.status === 'pending' && (
                    <>
                      <button 
                        className="btn-approve"
                        onClick={() => onStatusChange(review.id, 'approved')}
                      >
                        ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                      </button>
                      <button 
                        className="btn-reject"
                        onClick={() => onStatusChange(review.id, 'rejected')}
                      >
                        ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
                      </button>
                    </>
                  )}
                  {review.status === 'flagged' && (
                    <>
                      <button 
                        className="btn-approve"
                        onClick={() => onStatusChange(review.id, 'approved')}
                      >
                        ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                      </button>
                      <button 
                        className="btn-reject"
                        onClick={() => onStatusChange(review.id, 'rejected')}
                      >
                        ‚ùå ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
                      </button>
                    </>
                  )}
                </div>

                {/* Reply Section */}
                <div className="reply-section">
                  <h5>‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:</h5>
                  {review.admin_response && !isReplying ? (
                    <div className="existing-reply">
                      <div className="reply-content">{review.admin_response}</div>
                      <button 
                        className="btn-edit-reply"
                        onClick={() => setIsReplying(true)}
                      >
                        ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                      </button>
                    </div>
                  ) : (
                    <div className="reply-form">
                      <textarea
                        value={replyText}
                        onChange={(e) => setReplyText(e.target.value)}
                        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö..."
                        rows={4}
                        className="reply-textarea"
                      />
                      <div className="reply-actions">
                        <button 
                          className="btn-send-reply"
                          onClick={handleReply}
                        >
                          ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                        </button>
                        {isReplying && (
                          <button 
                            className="btn-cancel-reply"
                            onClick={() => setIsReplying(false)}
                          >
                            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                          </button>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
          <div className="modal-footer">
            <button className="btn-close" onClick={onClose}>‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="reviews-content">
      <h2>‚≠ê ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô</h2>

      {/* Review Stats */}
      <div className="review-stats">
        <div className="stats-card overview">
          <div className="stats-icon">üìä</div>
          <div className="stats-content">
            <h3>‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</h3>
            <div className="stats-value">{stats.total}</div>
            <div className="stats-label">‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
          </div>
        </div>

        <div className="stats-card rating">
          <div className="stats-icon">‚≠ê</div>
          <div className="stats-content">
            <h3>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</h3>
            <div className="stats-value">{stats.avgRating}/5.0</div>
            <div className="stats-label">{getStarRating(Math.round(stats.avgRating))}</div>
          </div>
        </div>

        <div className="stats-card pending">
          <div className="stats-icon">‚è≥</div>
          <div className="stats-content">
            <h3>‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h3>
            <div className="stats-value">{stats.pending}</div>
            <div className="stats-label">‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</div>
          </div>
        </div>

        <div className="stats-card approved">
          <div className="stats-icon">‚úÖ</div>
          <div className="stats-content">
            <h3>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</h3>
            <div className="stats-value">{stats.approved}</div>
            <div className="stats-label">‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</div>
          </div>
        </div>
      </div>

      {/* Rating Distribution */}
      <div className="rating-distribution">
        <h3>‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</h3>
        <div className="distribution-chart">
          {[5, 4, 3, 2, 1].map(rating => (
            <div key={rating} className="distribution-row">
              <span className="rating-label">{rating} ‚≠ê</span>
              <div className="distribution-bar">
                <div 
                  className="bar-fill"
                  style={{ 
                    width: `${stats.total > 0 ? (distribution[rating] / stats.total) * 100 : 0}%`,
                    backgroundColor: rating >= 4 ? '#28a745' : rating >= 3 ? '#ffc107' : '#dc3545'
                  }}
                ></div>
              </div>
              <span className="rating-count">{distribution[rating]}</span>
            </div>
          ))}
        </div>
      </div>

      {/* Controls */}
      <div className="review-controls">
        <div className="search-section">
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (‡∏ä‡∏∑‡πà‡∏≠, ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠, ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤, ‡∏™‡∏≤‡∏Ç‡∏≤)..."
            className="search-input"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <select
            className="filter-select"
            value={ratingFilter}
            onChange={(e) => setRatingFilter(e.target.value)}
          >
            <option value="">‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</option>
            <option value="5">5 ‡∏î‡∏≤‡∏ß</option>
            <option value="4">4 ‡∏î‡∏≤‡∏ß</option>
            <option value="3">3 ‡∏î‡∏≤‡∏ß</option>
            <option value="2">2 ‡∏î‡∏≤‡∏ß</option>
            <option value="1">1 ‡∏î‡∏≤‡∏ß</option>
          </select>
          <select
            className="filter-select"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
            <option value="pending">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
            <option value="approved">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</option>
            <option value="rejected">‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</option>
            <option value="flagged">‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</option>
          </select>
          <select
            className="filter-select"
            value={fitnessFilter}
            onChange={(e) => setFitnessFilter(e.target.value)}
          >
            {fitnessBranches.map(branch => (
              <option key={branch.id} value={branch.id}>
                {branch.name}
              </option>
            ))}
          </select>
          <button className="btn-reset" onClick={() => {
            setSearchTerm('');
            setRatingFilter('');
            setStatusFilter('');
            setFitnessFilter('all');
          }}>
            ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
          </button>
        </div>
      </div>

      {/* Reviews Table */}
      <div className="data-table">
        {loading ? (
          <div className="loading-message">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß...</div>
        ) : (
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                <th>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</th>
                <th>‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</th>
                <th>‡∏™‡∏≤‡∏Ç‡∏≤</th>
                <th>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö</th>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {filteredReviews.length > 0 ? (
                filteredReviews.map((review) => (
                  <tr key={review.id}>
                    <td>{review.id}</td>
                    <td>
                      <div className="user-cell">
                        <span className="user-avatar">{review.user_avatar}</span>
                        <div>
                          <div style={{ fontWeight: '500' }}>{review.user_name}</div>
                          <div style={{ fontSize: '0.8rem', color: '#666' }}>
                            {review.trainer_name !== '-' ? `‡πÇ‡∏Ñ‡πâ‡∏ä: ${review.trainer_name}` : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏ä'}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td>
                      <div className="rating-cell">
                        <span className="stars">{getStarRating(review.rating)}</span>
                        <span className="rating-number">({review.rating})</span>
                      </div>
                    </td>
                    <td>
                      <div className="title-cell">
                        {review.title.length > 30 ? `${review.title.slice(0, 30)}...` : review.title}
                      </div>
                    </td>
                    <td>{review.fitness_name}</td>
                    <td>{review.service_type}</td>
                    <td>{getStatusBadge(review.status)}</td>
                    <td>
                      <div className="interaction-cell">
                        <span className="helpful">üëç {review.helpful_count}</span>
                        <span className="reports">üö© {review.report_count}</span>
                      </div>
                    </td>
                    <td>{new Date(review.created_at).toLocaleDateString('th-TH')}</td>
                    <td>
                      <div className="action-buttons">
                        <button
                          className="btn-view"
                          onClick={() => {
                            setSelectedReview(review);
                            setShowReviewModal(true);
                          }}
                        >
                          ‡∏î‡∏π
                        </button>
                        {review.status === 'pending' && (
                          <>
                            <button
                              className="btn-approve"
                              onClick={() => handleStatusChange(review.id, 'approved')}
                            >
                              ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                            </button>
                            <button
                              className="btn-reject"
                              onClick={() => handleStatusChange(review.id, 'rejected')}
                            >
                              ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
                            </button>
                          </>
                        )}
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="10" style={{ textAlign: 'center', padding: '2rem' }}>
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        )}
      </div>

      {/* Review Detail Modal */}
      {showReviewModal && (
        <ReviewDetailModal
          review={selectedReview}
          onClose={() => {
            setShowReviewModal(false);
            setSelectedReview(null);
          }}
          onReply={handleReplyReview}
          onStatusChange={handleStatusChange}
        />
      )}
    </div>
  );
};

const NotificationsTab = () => (
  <div className="notifications-content">
    <h2>üîî ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
    <div className="section">
      <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤</p>
    </div>
  </div>
);

// Mock fitness branches - ‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ô‡∏≠‡∏Å component ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô re-creation
const fitnessBranches = [
  { id: 'all', name: '‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤' },
  { id: 'ladprao', name: 'PJ Fitness Ladprao' },
  { id: 'sukhumvit', name: 'PJ Fitness Sukhumvit' },
  { id: 'silom', name: 'PJ Fitness Silom' },
  { id: 'thonglor', name: 'PJ Fitness Thonglor' },
  { id: 'chatuchak', name: 'PJ Fitness Chatuchak' }
];

const ReportsTab = () => {
  const [reportData, setReportData] = useState({
    daily: [],
    monthly: [],
    yearly: [],
    fitnessBreakdown: []
  });
  const [selectedPeriod, setSelectedPeriod] = useState('monthly');
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().slice(0, 7)); // YYYY-MM
  const [selectedFitness, setSelectedFitness] = useState('all');
  const [loading, setLoading] = useState(false);

  const generateMockReportData = useCallback(() => {
    // Generate daily data for current month
    const dailyData = [];
    const daysInMonth = new Date(2025, 9, 0).getDate(); // October 2025
    
    for (let day = 1; day <= daysInMonth; day++) {
      const revenue = Math.floor(Math.random() * 50000) + 20000; // 20k-70k per day
      const bookings = Math.floor(Math.random() * 50) + 20; // 20-70 bookings
      dailyData.push({
        date: `2025-10-${String(day).padStart(2, '0')}`,
        revenue: revenue,
        bookings: bookings,
        avgPerBooking: Math.round(revenue / bookings)
      });
    }

    // Generate monthly data for current year
    const monthlyData = [];
    const months = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'];
    
    for (let month = 0; month < 12; month++) {
      const revenue = Math.floor(Math.random() * 800000) + 400000; // 400k-1.2M per month
      const bookings = Math.floor(Math.random() * 800) + 400; // 400-1200 bookings
      monthlyData.push({
        month: months[month],
        period: `2025-${String(month + 1).padStart(2, '0')}`,
        revenue: revenue,
        bookings: bookings,
        avgPerBooking: Math.round(revenue / bookings)
      });
    }

    // Generate yearly data
    const yearlyData = [];
    for (let year = 2023; year <= 2025; year++) {
      const revenue = Math.floor(Math.random() * 5000000) + 8000000; // 8M-13M per year
      const bookings = Math.floor(Math.random() * 5000) + 8000; // 8k-13k bookings
      yearlyData.push({
        year: year,
        revenue: revenue,
        bookings: bookings,
        avgPerBooking: Math.round(revenue / bookings),
        growth: year > 2023 ? (Math.random() * 30 + 5).toFixed(1) : 0 // 5-35% growth
      });
    }

    // Generate fitness breakdown
    const fitnessBreakdown = fitnessBranches.slice(1).map(fitness => {
      const revenue = Math.floor(Math.random() * 200000) + 100000; // 100k-300k per branch
      const bookings = Math.floor(Math.random() * 200) + 100; // 100-300 bookings
      return {
        id: fitness.id,
        name: fitness.name,
        revenue: revenue,
        bookings: bookings,
        avgPerBooking: Math.round(revenue / bookings),
        marketShare: ((revenue / 1000000) * 100).toFixed(1) // Mock market share
      };
    });

    return {
      daily: dailyData,
      monthly: monthlyData,
      yearly: yearlyData,
      fitnessBreakdown: fitnessBreakdown
    };
  }, []);

  const loadReportData = useCallback(async () => {
    setLoading(true);
    try {
      // Mock report data - ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Supabase
      const mockData = generateMockReportData();
      setReportData(mockData);
    } catch (error) {
      console.error('Error loading report data:', error);
    }
    setLoading(false);
  }, [generateMockReportData]);

  useEffect(() => {
    loadReportData();
  }, [loadReportData]);

  const getCurrentData = () => {
    switch (selectedPeriod) {
      case 'daily':
        return reportData.daily;
      case 'monthly':
        return reportData.monthly;
      case 'yearly':
        return reportData.yearly;
      default:
        return reportData.monthly;
    }
  };

  const getTotalRevenue = () => {
    const data = getCurrentData();
    return data.reduce((sum, item) => sum + item.revenue, 0);
  };

  const getTotalBookings = () => {
    const data = getCurrentData();
    return data.reduce((sum, item) => sum + item.bookings, 0);
  };

  const getAveragePerBooking = () => {
    const totalRevenue = getTotalRevenue();
    const totalBookings = getTotalBookings();
    return totalBookings > 0 ? Math.round(totalRevenue / totalBookings) : 0;
  };

  const exportToCSV = (data, filename) => {
    const headers = Object.keys(data[0]);
    const csvContent = [
      headers.join(','),
      ...data.map(row => headers.map(header => row[header]).join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${filename}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('th-TH', {
      style: 'currency',
      currency: 'THB',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const formatDate = (dateStr) => {
    return new Date(dateStr).toLocaleDateString('th-TH');
  };

  return (
    <div className="reports-content">
      <h2>üìà ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>

      {/* Controls */}
      <div className="report-controls">
        <div className="control-group">
          <label>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤:</label>
          <select 
            value={selectedPeriod} 
            onChange={(e) => setSelectedPeriod(e.target.value)}
            className="report-select"
          >
            <option value="daily">‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</option>
            <option value="monthly">‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
            <option value="yearly">‡∏£‡∏≤‡∏¢‡∏õ‡∏µ</option>
          </select>
        </div>

        <div className="control-group">
          <label>‡∏™‡∏≤‡∏Ç‡∏≤:</label>
          <select 
            value={selectedFitness} 
            onChange={(e) => setSelectedFitness(e.target.value)}
            className="report-select"
          >
            {fitnessBranches.map(branch => (
              <option key={branch.id} value={branch.id}>
                {branch.name}
              </option>
            ))}
          </select>
        </div>

        {selectedPeriod === 'daily' && (
          <div className="control-group">
            <label>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</label>
            <input 
              type="month" 
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              className="report-date"
            />
          </div>
        )}

        <div className="control-group">
          <button 
            className="btn-export"
            onClick={() => exportToCSV(getCurrentData(), `report-${selectedPeriod}-${new Date().toISOString().slice(0, 10)}`)}
          >
            üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å CSV
          </button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="report-summary">
        <div className="summary-card">
          <div className="summary-icon">üí∞</div>
          <div className="summary-content">
            <h3>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°</h3>
            <div className="summary-value">{formatCurrency(getTotalRevenue())}</div>
            <div className="summary-period">{selectedPeriod === 'daily' ? '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ' : selectedPeriod === 'monthly' ? '‡∏õ‡∏µ‡∏ô‡∏µ‡πâ' : '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}</div>
          </div>
        </div>

        <div className="summary-card">
          <div className="summary-icon">üìä</div>
          <div className="summary-content">
            <h3>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h3>
            <div className="summary-value">{getTotalBookings().toLocaleString()}</div>
            <div className="summary-period">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
          </div>
        </div>

        <div className="summary-card">
          <div className="summary-icon">üí≥</div>
          <div className="summary-content">
            <h3>‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h3>
            <div className="summary-value">{formatCurrency(getAveragePerBooking())}</div>
            <div className="summary-period">‡∏ö‡∏≤‡∏ó/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>
          </div>
        </div>

        <div className="summary-card">
          <div className="summary-icon">üè¢</div>
          <div className="summary-content">
            <h3>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤</h3>
            <div className="summary-value">{fitnessBranches.length - 1}</div>
            <div className="summary-period">‡∏™‡∏≤‡∏Ç‡∏≤</div>
          </div>
        </div>
      </div>

      {/* Main Report Table */}
      <div className="report-table-section">
        <div className="section-header">
          <h3>üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô{selectedPeriod === 'daily' ? '‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô' : selectedPeriod === 'monthly' ? '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' : '‡∏£‡∏≤‡∏¢‡∏õ‡∏µ'}</h3>
          <div className="table-actions">
            <button 
              className="btn-refresh"
              onClick={loadReportData}
              disabled={loading}
            >
              üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
            </button>
          </div>
        </div>

        {loading ? (
          <div className="loading-message">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...</div>
        ) : (
          <div className="data-table">
            <table>
              <thead>
                <tr>
                  <th>{selectedPeriod === 'daily' ? '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' : selectedPeriod === 'monthly' ? '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' : '‡∏õ‡∏µ'}</th>
                  <th>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó)</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</th>
                  <th>‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</th>
                  {selectedPeriod === 'yearly' && <th>‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï (%)</th>}
                </tr>
              </thead>
              <tbody>
                {getCurrentData().map((item, index) => (
                  <tr key={index}>
                    <td>
                      {selectedPeriod === 'daily' ? formatDate(item.date) :
                       selectedPeriod === 'monthly' ? item.month :
                       item.year}
                    </td>
                    <td className="currency">{formatCurrency(item.revenue)}</td>
                    <td className="number">{item.bookings.toLocaleString()}</td>
                    <td className="currency">{formatCurrency(item.avgPerBooking)}</td>
                    {selectedPeriod === 'yearly' && (
                      <td className="growth">
                        {item.growth > 0 ? `+${item.growth}%` : '-'}
                      </td>
                    )}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Fitness Branch Breakdown */}
      <div className="fitness-breakdown-section">
        <h3>üè¢ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤</h3>
        <div className="data-table">
          <table>
            <thead>
              <tr>
                <th>‡∏™‡∏≤‡∏Ç‡∏≤</th>
                <th>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó)</th>
                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</th>
                <th>‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</th>
                <th>‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏•‡∏≤‡∏î (%)</th>
              </tr>
            </thead>
            <tbody>
              {reportData.fitnessBreakdown.map((branch) => (
                <tr key={branch.id}>
                  <td>{branch.name}</td>
                  <td className="currency">{formatCurrency(branch.revenue)}</td>
                  <td className="number">{branch.bookings.toLocaleString()}</td>
                  <td className="currency">{formatCurrency(branch.avgPerBooking)}</td>
                  <td className="percentage">{branch.marketShare}%</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Quick Insights */}
      <div className="insights-section">
        <h3>üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å</h3>
        <div className="insights-grid">
          <div className="insight-card">
            <h4>üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</h4>
            <p>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {formatCurrency(getTotalRevenue() / 12)}</p>
            <p>‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: +15.2% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ</p>
          </div>
          
          <div className="insight-card">
            <h4>üéØ ‡∏™‡∏≤‡∏Ç‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</h4>
            <p>‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: PJ Fitness Sukhumvit</p>
            <p>‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î: PJ Fitness Ladprao</p>
          </div>
          
          <div className="insight-card">
            <h4>‚≠ê ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</h4>
            <p>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: 89.5%</p>
            <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: 4.7/5.0</p>
          </div>
          
          <div className="insight-card">
            <h4>üìÖ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</h4>
            <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå</p>
            <p>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: 18:00-20:00 ‡∏ô.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminPage;