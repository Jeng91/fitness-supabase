// NearbyFitness.jsx - ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
import React, { useState, useEffect } from 'react';
import locationAPI from '../utils/locationAPI';
import MapView from './MapView';
import './NearbyFitness.css';
import { useNavigate } from 'react-router-dom';

const NearbyFitness = () => {
  const [userLocation, setUserLocation] = useState(null);
  const [nearbyFitness, setNearbyFitness] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [locationStatus, setLocationStatus] = useState(''); // 'requesting', 'success', 'error'
  const [statusMessage, setStatusMessage] = useState('');
  const [searchRadius, setSearchRadius] = useState(10); // ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  const [sortBy, setSortBy] = useState('distance'); // 'distance', 'name', 'type'
  const [selectedFitness, setSelectedFitness] = useState(null);
  const [showMap, setShowMap] = useState(false);
  const navigate = useNavigate();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå
  useEffect(() => {
    const autoSearchFitness = async () => {
      if (locationAPI.isGeolocationSupported()) {
        const permission = await locationAPI.requestLocationPermission();
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if (permission === 'granted' || permission === 'prompt' || permission === 'unknown') {
          handleFindNearby(false); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
        }
      }
    };
    autoSearchFitness();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™
  const handleFindNearby = async (useDemo = false) => {
    setIsLoading(true);
    setLocationStatus('requesting');
    setStatusMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...');

    try {
      let location;
      
      if (useDemo) {
        // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á demo (‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°)
        location = locationAPI.getDemoLocation();
        setStatusMessage('‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Demo: ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°');
      } else {
        // ‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        setStatusMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...');
        location = await locationAPI.getCurrentLocation();
        setStatusMessage('‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!');
      }

      setUserLocation(location);
      setLocationStatus('success');

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
      setStatusMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á...');
      const result = await locationAPI.findNearbyFitness(
        location.lat, 
        location.lng, 
        searchRadius
      );

      if (result.success) {
        setNearbyFitness(result.data);
        setStatusMessage(result.message);
      } else {
        throw new Error(result.error);
      }

    } catch (error) {
      console.error('Error finding nearby fitness:', error);
      setLocationStatus('error');
      setStatusMessage(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
      setNearbyFitness([]);
    } finally {
      setIsLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const sortFitnessResults = (data, sortType) => {
    const sorted = [...data];
    switch (sortType) {
      case 'distance':
        return sorted.sort((a, b) => a.distance - b.distance);
      case 'name':
        return sorted.sort((a, b) => a.fit_name.localeCompare(b.fit_name));
      case 'type':
        return sorted.sort((a, b) => (a.fit_type || '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™').localeCompare(b.fit_type || '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™'));
      default:
        return sorted;
    }
  };

  // ...existing code...

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  const handleFitnessSelectFromMap = (fitness) => {
    setSelectedFitness(fitness);
    // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const cardElement = document.getElementById(`fitness-card-${fitness.fit_id}`);
    if (cardElement) {
      cardElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      cardElement.style.border = '3px solid #e74c3c';
      setTimeout(() => {
        cardElement.style.border = '';
      }, 3000);
    }
  };

  const sortedFitness = sortFitnessResults(nearbyFitness, sortBy);

  // ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  useEffect(() => {
    try {
      if (!userLocation || !nearbyFitness || nearbyFitness.length === 0) return;
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö
      if (selectedFitness) return;

      const nearest = sortFitnessResults(nearbyFitness, 'distance')[0];
      const AUTO_DISTANCE_KM = 0.2; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: 200 ‡πÄ‡∏°‡∏ï‡∏£

      if (nearest) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if (nearbyFitness.length === 1 || nearest.distance <= AUTO_DISTANCE_KM) {
          setSelectedFitness(nearest);
          // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
          setTimeout(() => {
            const el = document.getElementById(`fitness-card-${nearest.fit_id}`);
            if (el) {
              el.scrollIntoView({ behavior: 'smooth', block: 'center' });
              el.style.boxShadow = '0 8px 24px rgba(102,126,234,0.18)';
              el.style.border = '2px solid rgba(102,126,234,0.3)';
              setTimeout(() => {
                el.style.boxShadow = '';
                el.style.border = '';
              }, 3000);
            }
          }, 250);
        }
      }
    } catch (err) {
      console.error('Auto-select nearest fitness error:', err);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [nearbyFitness, userLocation]);

  return (
    <div className="nearby-fitness-container">
      {/* Header */}
      <div className="nearby-header">
        <h2 className="nearby-title">
          <span className="location-icon">üìç</span>
          ‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á (‡∏£‡∏±‡∏®‡∏°‡∏µ 10 ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£)
        </h2>
        <div style={{ display: 'flex', gap: '12px' }}>
          {nearbyFitness.length > 0 && (
            <button
              onClick={() => setShowMap(!showMap)}
              className="find-nearby-btn"
              style={{ background: 'linear-gradient(135deg, #9b59b6, #8e44ad)' }}
            >
              <span>{showMap ? 'üìã' : 'üó∫Ô∏è'}</span>
              {showMap ? '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' : '‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà'}
            </button>
          )}
          <button
            onClick={() => handleFindNearby(false)}
            disabled={isLoading}
            className="find-nearby-btn"
            style={{ background: 'linear-gradient(135deg, #27ae60, #229954)' }}
          >
            {isLoading ? (
              <>
                <span>‚è≥</span>
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...
              </>
            ) : (
              <>
                <span>üîÑ</span>
                ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
              </>
            )}
          </button>
          <button
            onClick={() => handleFindNearby(true)}
            disabled={isLoading}
            className="find-nearby-btn"
            style={{ background: 'linear-gradient(135deg, #f39c12, #e67e22)' }}
          >
            <span>üè´</span>
            Demo
          </button>
        </div>
      </div>

      {/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ - ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ */}
      <div className="radius-selector" style={{ display: 'none' }}>
        <label htmlFor="radius">‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:</label>
        <input
          id="radius"
          type="number"
          min="1"
          max="50"
          value={searchRadius}
          onChange={(e) => setSearchRadius(parseInt(e.target.value) || 10)}
          className="radius-input"
        />
        <span>‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£</span>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
      {locationStatus && locationStatus !== 'success' && (
        <div className={`location-status ${locationStatus}`}>
          <span>
            {locationStatus === 'requesting' && '‚è≥'}
            {locationStatus === 'error' && '‚ùå'}
          </span>
          {statusMessage}
        </div>
      )}

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
      {/* location-info ‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô */}
      {false && (
        <div className="location-info">
          <h4>üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h4>
          <div className="location-details">
            <div><strong>‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î:</strong> {userLocation.lat.toFixed(6)}</div>
            <div><strong>‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î:</strong> {userLocation.lng.toFixed(6)}</div>
            {userLocation.accuracy && (
              <div><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥:</strong> ¬±{Math.round(userLocation.accuracy)} ‡πÄ‡∏°‡∏ï‡∏£</div>
            )}
            {userLocation.name && (
              <div><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> {userLocation.name}</div>
            )}
          </div>
        </div>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î */}
      {isLoading && (
        <div className="loading-spinner">
          <div className="spinner"></div>
        </div>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
      {!isLoading && nearbyFitness.length > 0 && (
        <>
          {showMap ? (
            /* ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà */
            <div style={{ marginBottom: '20px' }}>
              <MapView
                userLocation={userLocation}
                fitnessLocations={sortedFitness}
                selectedFitness={selectedFitness}
                onFitnessSelect={handleFitnessSelectFromMap}
                mapHeight="500px"
                showControls={true}
              />
            </div>
          ) : (
            /* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ */
            <div className="fitness-results">
              <div className="results-header">
                <div className="results-count">
                  ‡∏û‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ {nearbyFitness.length} ‡πÅ‡∏´‡πà‡∏á
                </div>
                <div className="sort-options">
                  <button
                    className={`sort-btn ${sortBy === 'distance' ? 'active' : ''}`}
                    onClick={() => setSortBy('distance')}
                  >
                    ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                  </button>
                  <button
                    className={`sort-btn ${sortBy === 'name' ? 'active' : ''}`}
                    onClick={() => setSortBy('name')}
                  >
                    ‡∏ä‡∏∑‡πà‡∏≠
                  </button>
                  <button
                    className={`sort-btn ${sortBy === 'type' ? 'active' : ''}`}
                    onClick={() => setSortBy('type')}
                  >
                    ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                  </button>
                </div>
              </div>

              {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ */}
              {sortedFitness.map((fitness, index) => (
                <div 
                    key={fitness.fit_id} 
                    id={`fitness-card-${fitness.fit_id}`}
                    className="fitness-card modern"
                  >
                  <div className="fitness-card-imgwrap">
                    <img 
                      src={fitness.fit_image || '/default-fitness.png'} 
                      alt={fitness.fit_name}
                      className="fitness-card-img"
                      onError={e => e.target.style.display = 'none'}
                    />
                    <button className="favorite-btn" title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î">
                      <span role="img" aria-label="favorite">‚ô°</span>
                    </button>
                  </div>
                  <div className="fitness-card-content">
                    <div className="fitness-card-title">{fitness.fit_name}</div>
                    <div className="fitness-card-address">
                      <span role="img" aria-label="address">üìç</span> {fitness.fit_address}
                    </div>
                    <div className="fitness-card-price-rating">
                      <div className="fitness-card-price">
                        <span className="price-label">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà</span>
                        <span className="price-value">{fitness.fit_price ? Number(fitness.fit_price).toFixed(2) : '-'} ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô</span>
                      </div>
                      <div className="fitness-card-rating">
                        <span className="rating-value">{fitness.rating || '9.6'}</span>
                        <span className="rating-count">{fitness.review_count || '138'} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô</span>
                      </div>
                    </div>
                    <button className="view-details-btn" onClick={() => navigate(`/fitness/${fitness.fit_id}`)}>
                      ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    </button>
                    {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ */}
                    
                  </div>
                </div>
              ))}
            </div>
          )}
        </>
      )}

      {/* ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */}
      {!isLoading && nearbyFitness.length === 0 && locationStatus === 'success' && (
        <div className="no-results">
          <div className="no-results-icon">üîç</div>
          <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á</h3>
          <p>‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</p>
        </div>
      )}

      {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà */}
      {!userLocation && !isLoading && locationStatus !== 'error' && (
        <div className="demo-notice">
          <span className="demo-notice-icon">üéØ</span>
          <div className="demo-notice-text">
            <strong>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á...</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 10 ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
          </div>
        </div>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå */}
      {locationStatus === 'error' && (
        <div className="demo-notice" style={{ background: '#fff5f5', borderColor: '#feb2b2' }}>
          <span className="demo-notice-icon" style={{ color: '#e53e3e' }}>üö´</span>
          <div className="demo-notice-text" style={{ color: '#c53030' }}>
            <strong>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ:</strong> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Demo" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
          </div>
        </div>
      )}
    </div>
  );
};

export default NearbyFitness;