// NearbyFitness.jsx - ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
import React, { useState, useEffect } from 'react';
import locationAPI from '../utils/locationAPI';
import MapView from './MapView';
import './NearbyFitness.css';

const NearbyFitness = () => {
  const [userLocation, setUserLocation] = useState(null);
  const [nearbyFitness, setNearbyFitness] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [locationStatus, setLocationStatus] = useState(''); // 'requesting', 'success', 'error'
  const [statusMessage, setStatusMessage] = useState('');
  const [searchRadius, setSearchRadius] = useState(10); // ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  const [sortBy, setSortBy] = useState('distance'); // 'distance', 'name', 'type'
  const [permissionState, setPermissionState] = useState('unknown');
  const [selectedFitness, setSelectedFitness] = useState(null);
  const [showMap, setShowMap] = useState(false);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå
  useEffect(() => {
    const checkPermission = async () => {
      if (locationAPI.isGeolocationSupported()) {
        const permission = await locationAPI.requestLocationPermission();
        setPermissionState(permission);
      }
    };
    checkPermission();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™
  const handleFindNearby = async (useDemo = false) => {
    setIsLoading(true);
    setLocationStatus('requesting');
    setStatusMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...');

    try {
      let location;
      
      if (useDemo) {
        // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á demo (‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°)
        location = locationAPI.getDemoLocation();
        setStatusMessage('‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Demo: ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°');
      } else {
        // ‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        setStatusMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...');
        location = await locationAPI.getCurrentLocation();
        setStatusMessage('‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß!');
      }

      setUserLocation(location);
      setLocationStatus('success');

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
      setStatusMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á...');
      const result = await locationAPI.findNearbyFitness(
        location.lat, 
        location.lng, 
        searchRadius
      );

      if (result.success) {
        setNearbyFitness(result.data);
        setStatusMessage(result.message);
      } else {
        throw new Error(result.error);
      }

    } catch (error) {
      console.error('Error finding nearby fitness:', error);
      setLocationStatus('error');
      setStatusMessage(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
      setNearbyFitness([]);
    } finally {
      setIsLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  const sortFitnessResults = (data, sortType) => {
    const sorted = [...data];
    switch (sortType) {
      case 'distance':
        return sorted.sort((a, b) => a.distance - b.distance);
      case 'name':
        return sorted.sort((a, b) => a.fit_name.localeCompare(b.fit_name));
      case 'type':
        return sorted.sort((a, b) => (a.fit_type || '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™').localeCompare(b.fit_type || '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™'));
      default:
        return sorted;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
  const handleGetDirections = (fitness) => {
    if (userLocation && fitness.coordinates) {
      locationAPI.openDirections(
        userLocation.lat,
        userLocation.lng,
        fitness.coordinates.lat,
        fitness.coordinates.lng,
        fitness.fit_name
      );
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Google Maps ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
  const handleViewLocation = (fitness) => {
    if (fitness.coordinates) {
      locationAPI.openLocationMap(
        fitness.coordinates.lat,
        fitness.coordinates.lng,
        fitness.fit_name
      );
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ (‡πÇ‡∏ó‡∏£)
  const handleContact = (phone) => {
    if (phone) {
      window.open(`tel:${phone}`, '_self');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  const handleFitnessSelectFromMap = (fitness) => {
    setSelectedFitness(fitness);
    // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const cardElement = document.getElementById(`fitness-card-${fitness.fit_id}`);
    if (cardElement) {
      cardElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      cardElement.style.border = '3px solid #e74c3c';
      setTimeout(() => {
        cardElement.style.border = '';
      }, 3000);
    }
  };

  const sortedFitness = sortFitnessResults(nearbyFitness, sortBy);

  return (
    <div className="nearby-fitness-container">
      {/* Header */}
      <div className="nearby-header">
        <h2 className="nearby-title">
          <span className="location-icon">üìç</span>
          ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
        </h2>
        <div style={{ display: 'flex', gap: '12px' }}>
          <button
            onClick={() => handleFindNearby(false)}
            disabled={isLoading}
            className="find-nearby-btn"
          >
            {isLoading ? (
              <>
                <span>‚è≥</span>
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...
              </>
            ) : (
              <>
                <span>üéØ</span>
                ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏â‡∏±‡∏ô
              </>
            )}
          </button>
          <button
            onClick={() => handleFindNearby(true)}
            disabled={isLoading}
            className="find-nearby-btn"
            style={{ background: 'linear-gradient(135deg, #f39c12, #e67e22)' }}
          >
            <span>üè´</span>
            ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Demo
          </button>
          {nearbyFitness.length > 0 && (
            <button
              onClick={() => setShowMap(!showMap)}
              className="find-nearby-btn"
              style={{ background: 'linear-gradient(135deg, #9b59b6, #8e44ad)' }}
            >
              <span>{showMap ? 'üìã' : 'üó∫Ô∏è'}</span>
              {showMap ? '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' : '‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà'}
            </button>
          )}
        </div>
      </div>

      {/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
      <div className="radius-selector">
        <label htmlFor="radius">‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:</label>
        <input
          id="radius"
          type="number"
          min="1"
          max="50"
          value={searchRadius}
          onChange={(e) => setSearchRadius(parseInt(e.target.value) || 10)}
          className="radius-input"
        />
        <span>‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£</span>
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
      {locationStatus && (
        <div className={`location-status ${locationStatus}`}>
          <span>
            {locationStatus === 'requesting' && '‚è≥'}
            {locationStatus === 'success' && '‚úÖ'}
            {locationStatus === 'error' && '‚ùå'}
          </span>
          {statusMessage}
        </div>
      )}

      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */}
      {userLocation && (
        <div className="location-info">
          <h4>üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h4>
          <div className="location-details">
            <div><strong>‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î:</strong> {userLocation.lat.toFixed(6)}</div>
            <div><strong>‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î:</strong> {userLocation.lng.toFixed(6)}</div>
            {userLocation.accuracy && (
              <div><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥:</strong> ¬±{Math.round(userLocation.accuracy)} ‡πÄ‡∏°‡∏ï‡∏£</div>
            )}
            {userLocation.name && (
              <div><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> {userLocation.name}</div>
            )}
          </div>
        </div>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î */}
      {isLoading && (
        <div className="loading-spinner">
          <div className="spinner"></div>
        </div>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
      {!isLoading && nearbyFitness.length > 0 && (
        <>
          {showMap ? (
            /* ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà */
            <div style={{ marginBottom: '20px' }}>
              <MapView
                userLocation={userLocation}
                fitnessLocations={sortedFitness}
                selectedFitness={selectedFitness}
                onFitnessSelect={handleFitnessSelectFromMap}
                mapHeight="500px"
                showControls={true}
              />
            </div>
          ) : (
            /* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ */
            <div className="fitness-results">
              <div className="results-header">
                <div className="results-count">
                  ‡∏û‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ {nearbyFitness.length} ‡πÅ‡∏´‡πà‡∏á
                </div>
                <div className="sort-options">
                  <button
                    className={`sort-btn ${sortBy === 'distance' ? 'active' : ''}`}
                    onClick={() => setSortBy('distance')}
                  >
                    ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                  </button>
                  <button
                    className={`sort-btn ${sortBy === 'name' ? 'active' : ''}`}
                    onClick={() => setSortBy('name')}
                  >
                    ‡∏ä‡∏∑‡πà‡∏≠
                  </button>
                  <button
                    className={`sort-btn ${sortBy === 'type' ? 'active' : ''}`}
                    onClick={() => setSortBy('type')}
                  >
                    ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                  </button>
                </div>
              </div>

              {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ */}
              {sortedFitness.map((fitness, index) => (
                <div 
                  key={fitness.fit_id} 
                  id={`fitness-card-${fitness.fit_id}`}
                  className={`fitness-card ${selectedFitness?.fit_id === fitness.fit_id ? 'selected' : ''}`}
                  onClick={() => setSelectedFitness(fitness)}
                >
                  <div className="fitness-card-header">
                    <div className="fitness-basic-info">
                      <h3>{fitness.fit_name}</h3>
                      <span className="fitness-type">{fitness.fit_type || '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™'}</span>
                    </div>
                    <div className="distance-badge">
                      <span>üìè</span>
                      {fitness.distanceText}
                    </div>
                  </div>

                  <div className="fitness-details">
                    <div className="detail-item">
                      <span className="detail-icon">üìç</span>
                      <span>{fitness.fit_address}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-icon">üìû</span>
                      <span>{fitness.fit_phone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-icon">‚è∞</span>
                      <span>
                        {fitness.fit_dateopen && fitness.fit_dateclose 
                          ? `${fitness.fit_dateopen} - ${fitness.fit_dateclose}` 
                          : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î'
                        }
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-icon">üí∞</span>
                      <span>‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô {fitness.fit_price || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ö‡∏≤‡∏ó</span>
                    </div>
                  </div>

                  <div className="fitness-actions">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleGetDirections(fitness);
                      }}
                      className="action-btn primary"
                    >
                      <span>üó∫Ô∏è</span>
                      ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleViewLocation(fitness);
                      }}
                      className="action-btn secondary"
                    >
                      <span>üìç</span>
                      ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                    </button>
                    {fitness.fit_phone && (
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleContact(fitness.fit_phone);
                        }}
                        className="action-btn outline"
                      >
                        <span>üìû</span>
                        ‡πÇ‡∏ó‡∏£
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </>
      )}

      {/* ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */}
      {!isLoading && nearbyFitness.length === 0 && locationStatus === 'success' && (
        <div className="no-results">
          <div className="no-results-icon">üîç</div>
          <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á</h3>
          <p>‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</p>
        </div>
      )}

      {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà */}
      {!userLocation && !isLoading && (
        <div className="demo-notice">
          <span className="demo-notice-icon">üí°</span>
          <div className="demo-notice-text">
            <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏â‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á ‡∏´‡∏£‡∏∑‡∏≠ "‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Demo" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
          </div>
        </div>
      )}
    </div>
  );
};

export default NearbyFitness;