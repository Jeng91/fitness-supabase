import React, { useState, useEffect, useCallback } from 'react';
import supabase from '../supabaseClient';
import './ActivityManagement.css';

const ClassManagement = ({ ownerData, onUpdate }) => {
  const [classes, setClasses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [editing, setEditing] = useState(null);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [uploading, setUploading] = useState(false);

  const [formData, setFormData] = useState({
    class_name: '',
    description: '',
    image_url: '',
    class_time: '',
    duration: 60,
    instructor: '',
    max_participants: 10,
    price: 0,
    status: 'active'
  });

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™
  const loadClasses = useCallback(async () => {
    if (!ownerData?.owner_name) return;

    setLoading(true);
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏Å‡πà‡∏≠‡∏ô - ‡πÉ‡∏ä‡πâ fit_user ‡∏à‡∏≤‡∏Å tbl_fitness
      const { data: fitnessData, error: fitnessError } = await supabase
        .from('tbl_fitness')
        .select('fit_id')
        .eq('fit_user', ownerData.owner_name)
        .single();

      if (fitnessError || !fitnessData) {
        console.log('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™');
        setClasses([]);
        return;
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™
      const { data: classData, error: classError } = await supabase
        .from('tbl_classes')
        .select('*')
        .eq('fit_id', fitnessData.fit_id)
        .order('created_at', { ascending: false });

      if (classError) {
        console.error('Error loading classes:', classError);
      } else {
        setClasses(classData || []);
      }
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  }, [ownerData]);


  useEffect(() => {
    loadClasses();
  }, [loadClasses]);

  // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const uploadImage = async (file) => {
    if (!file) return null;

    try {
      setUploading(true);

      if (file.size > 5 * 1024 * 1024) {
        alert('‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB');
        return null;
      }

      if (!file.type.startsWith('image/')) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        return null;
      }

      const fileExt = file.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;
      const filePath = `classes/${Date.now()}/${fileName}`;

      const { error } = await supabase.storage
        .from('fitness-images')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (error) {
        console.error('Upload error:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
        return null;
      }

      const { data: { publicUrl } } = supabase.storage
        .from('fitness-images')
        .getPublicUrl(filePath);

      return publicUrl;
    } catch (error) {
      console.error('Error:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
      return null;
    } finally {
      setUploading(false);
    }
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™
  const handleSave = async (e) => {
    e.preventDefault();

    if (!formData.class_name || !formData.description) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ - ‡πÉ‡∏ä‡πâ fit_user
      const { data: fitnessData, error: fitnessError } = await supabase
        .from('tbl_fitness')
        .select('fit_id')
        .eq('fit_user', ownerData.owner_name)
        .single();

      if (fitnessError || !fitnessData) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏Å‡πà‡∏≠‡∏ô');
        return;
      }

      const itemData = {
        fit_id: fitnessData.fit_id,
        class_name: formData.class_name,
        description: formData.description,
        image_url: formData.image_url,
        class_time: formData.class_time,
        duration: parseInt(formData.duration),
        instructor: formData.instructor,
        max_participants: parseInt(formData.max_participants),
        price: parseFloat(formData.price),
        status: formData.status
      };

      let result;
      if (editing) {
        result = await supabase
          .from('tbl_classes')
          .update(itemData)
          .eq('class_id', editing.class_id)
          .select()
          .single();
      } else {
        result = await supabase
          .from('tbl_classes')
          .insert(itemData)
          .select()
          .single();
      }

      if (result.error) {
        console.error('Error saving class:', result.error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ' + result.error.message);
        return;
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
      if (editing) {
        setClasses(prev => 
          prev.map(item => 
            item.class_id === editing.class_id ? result.data : item
          )
        );
      } else {
        setClasses(prev => [result.data, ...prev]);
      }

      resetForm();
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      if (onUpdate) onUpdate();
    } catch (error) {
      console.error('Error:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
    }
  };

  // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™
  const deleteClass = async (item) => {
    if (!window.confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;

    try {
      const { error } = await supabase
        .from('tbl_classes')
        .delete()
        .eq('class_id', item.class_id);

      if (error) {
        console.error('Error deleting class:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
        return;
      }

      setClasses(prev => prev.filter(cls => cls.class_id !== item.class_id));
      alert('‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      if (onUpdate) onUpdate();
    } catch (error) {
      console.error('Error:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
    }
  };

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏•‡∏≤‡∏™
  const editClass = (item) => {
    setEditing(item);
    setFormData({
      class_name: item.class_name || '',
      description: item.description || '',
      image_url: item.image_url || '',
      class_time: item.class_time || '',
      duration: item.duration || 60,
      instructor: item.instructor || '',
      max_participants: item.max_participants || 10,
      price: item.price || 0,
      status: item.status || 'active'
    });
    setShowCreateForm(true);
  };

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
  const resetForm = () => {
    setFormData({
      class_name: '',
      description: '',
      image_url: '',
      class_time: '',
      duration: 60,
      instructor: '',
      max_participants: 10,
      price: 0,
      status: 'active'
    });
    setEditing(null);
    setShowCreateForm(false);
  };

  if (loading) {
    return (
      <div className="class-management">
        <div className="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™...</div>
      </div>
    );
  }

  return (
    <div className="class-management">
      <div className="section-header">
        <h2>üéØ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏≤‡∏™</h2>
        <button
          className="btn-primary"
          onClick={() => setShowCreateForm(true)}
        >
          + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà
        </button>
      </div>

      {classes.length === 0 ? (
        <div className="empty-state">
          <div className="empty-icon">üèãÔ∏è‚Äç‚ôÇÔ∏è</div>
          <h3>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏•‡∏≤‡∏™</h3>
          <p>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
          <button
            className="btn-primary"
            onClick={() => setShowCreateForm(true)}
          >
            + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏£‡∏Å
          </button>
        </div>
      ) : (
        <div className="classes-grid">
          {classes.map((classItem) => (
            <div key={classItem.class_id} className="class-card">
              {classItem.image_url && (
                <div className="class-image">
                  <img 
                    src={classItem.image_url} 
                    alt={classItem.class_name}
                  />
                </div>
              )}
              <div className="class-content">
                <h3>{classItem.class_name}</h3>
                <p className="description">{classItem.description}</p>
                
                <div className="class-details">
                  <div className="detail-item">
                    <span className="icon">‚è∞</span>
                    <span className="label">‡πÄ‡∏ß‡∏•‡∏≤:</span>
                    <span className="value">{classItem.class_time || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
                  </div>
                  
                  <div className="detail-item">
                    <span className="icon">‚è±Ô∏è</span>
                    <span className="label">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</span>
                    <span className="value">{classItem.duration} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
                  </div>
                  
                  <div className="detail-item">
                    <span className="icon">üë®‚Äçüè´</span>
                    <span className="label">‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô:</span>
                    <span className="value">{classItem.instructor || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
                  </div>
                  
                  <div className="detail-item">
                    <span className="icon">üë•</span>
                    <span className="label">‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°:</span>
                    <span className="value">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {classItem.max_participants} ‡∏Ñ‡∏ô</span>
                  </div>
                  
                  <div className="detail-item">
                    <span className="icon">üí∞</span>
                    <span className="label">‡∏£‡∏≤‡∏Ñ‡∏≤:</span>
                    <span className="value price">{classItem.price} ‡∏ö‡∏≤‡∏ó</span>
                  </div>
                  
                  <div className="detail-item">
                    <span className="icon">üìä</span>
                    <span className="label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
                    <span className={`value status ${classItem.status}`}>
                      {classItem.status === 'active' ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                    </span>
                  </div>
                </div>
                
                <div className="class-actions">
                  <button
                    className="btn-edit"
                    onClick={() => editClass(classItem)}
                  >
                    ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </button>
                  <button
                    className="btn-delete"
                    onClick={() => deleteClass(classItem)}
                  >
                    üóëÔ∏è ‡∏•‡∏ö
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏•‡∏≤‡∏™ */}
      {showCreateForm && (
        <div className="modal-overlay" onClick={resetForm}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>{editing ? '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏•‡∏≤‡∏™' : '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà'}</h3>
              <button className="btn-close" onClick={resetForm}>√ó</button>
            </div>
            
            <form onSubmit={handleSave} className="form-content">
              <div className="form-group">
                <label>‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™ *</label>
                <input
                  type="text"
                  value={formData.class_name}
                  onChange={(e) => setFormData({...formData, class_name: e.target.value})}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏¢‡∏Ñ‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô, ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠‡πÅ‡∏î‡∏ô‡∏ã‡πå, ‡∏¢‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å"
                  required
                />
              </div>

              <div className="form-group">
                <label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ *</label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"
                  rows="3"
                  required
                />
              </div>

              <div className="form-group">
                <label>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡∏≤‡∏™</label>
                <input
                  type="file"
                  accept="image/*"
                  onChange={async (e) => {
                    const file = e.target.files[0];
                    if (file) {
                      const imageUrl = await uploadImage(file);
                      if (imageUrl) {
                        setFormData({...formData, image_url: imageUrl});
                      }
                    }
                  }}
                  disabled={uploading}
                />
                {uploading && <p className="upload-status">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...</p>}
                {formData.image_url && (
                  <div className="image-preview">
                    <img 
                      src={formData.image_url} 
                      alt="Preview" 
                    />
                  </div>
                )}
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
                  <input
                    type="time"
                    value={formData.class_time}
                    onChange={(e) => setFormData({...formData, class_time: e.target.value})}
                  />
                </div>

                <div className="form-group">
                  <label>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ô‡∏≤‡∏ó‡∏µ)</label>
                  <input
                    type="number"
                    value={formData.duration}
                    onChange={(e) => setFormData({...formData, duration: e.target.value})}
                    min="15"
                    max="180"
                    step="15"
                  />
                </div>
              </div>

              <div className="form-group">
                <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô</label>
                <input
                  type="text"
                  value={formData.instructor}
                  onChange={(e) => setFormData({...formData, instructor: e.target.value})}
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå"
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</label>
                  <input
                    type="number"
                    value={formData.max_participants}
                    onChange={(e) => setFormData({...formData, max_participants: e.target.value})}
                    min="1"
                    max="100"
                  />
                </div>

                <div className="form-group">
                  <label>‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)</label>
                  <input
                    type="number"
                    value={formData.price}
                    onChange={(e) => setFormData({...formData, price: e.target.value})}
                    min="0"
                    step="10"
                  />
                </div>
              </div>

              <div className="form-group">
                <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData({...formData, status: e.target.value})}
                >
                  <option value="active">‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>
                  <option value="inactive">‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</option>
                </select>
              </div>

              <div className="form-actions">
                <button 
                  type="submit" 
                  className="btn-save"
                  disabled={!formData.class_name || !formData.description || uploading}
                >
                  {editing ? 'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' : '‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™'}
                </button>
                <button type="button" onClick={resetForm} className="btn-cancel">
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                
              </div>
            </form>
          </div>
        </div>
      )}

      
    </div>
  );
};

export default ClassManagement;