import React, { useState, useEffect, useCallback } from 'react';
import { 
  updatePartnerBankAccount, 
  getPartnerBankAccount, 
  getPartnerTransfers,
  calculatePartnerRevenue,
  validateBankAccountData 
} from '../utils/partnerAccountAPI';
import './PartnerBankManagement.css';

const PartnerBankManagement = ({ ownerData }) => {
  const [fitnessId, setFitnessId] = useState(null);
  const [bankAccountData, setBankAccountData] = useState({
    partner_bank_account: '',
    partner_bank_name: '',
    partner_account_name: '',
    partner_promptpay_id: '',
    revenue_split_percentage: 80.00
  });
  const [transfers, setTransfers] = useState([]);
  const [revenueStats, setRevenueStats] = useState(null);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [errors, setErrors] = useState({});
  const [showAccountForm, setShowAccountForm] = useState(false);
  const [activeTab, setActiveTab] = useState('account'); // 'account', 'transfers', 'revenue'

  // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
  const THAI_BANKS = [
    { code: 'BBL', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', shortName: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û' },
    { code: 'KBANK', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢', shortName: '‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢' },
    { code: 'KTB', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢', shortName: '‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢' },
    { code: 'SCB', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå', shortName: '‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå' },
    { code: 'TMB', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï', shortName: '‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï' },
    { code: 'BAY', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', shortName: '‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤' },
    { code: 'GSB', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô', shortName: '‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô' },
    { code: 'BAAC', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£', shortName: '‡∏ò.‡∏Å.‡∏™.' },
    { code: 'TISCO', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏¥‡∏™‡πÇ‡∏Å‡πâ', shortName: '‡∏ó‡∏¥‡∏™‡πÇ‡∏Å‡πâ' },
    { code: 'UOB', name: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏¢‡∏π‡πÇ‡∏≠‡∏ö‡∏µ', shortName: '‡∏¢‡∏π‡πÇ‡∏≠‡∏ö‡∏µ' }
  ];

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ ID
  const loadFitnessId = useCallback(async () => {
    if (!ownerData?.owner_name) return;

    try {
      // ‡∏î‡∏∂‡∏á fitness_id ‡∏à‡∏≤‡∏Å supabase
      const { supabase } = await import('../supabaseClient');
      const { data, error } = await supabase
        .from('tbl_fitness')
        .select('fit_id')
        .eq('fit_user', ownerData.owner_name)
        .single();

      if (error) {
        console.error('Error loading fitness ID:', error);
        return;
      }

      if (data) {
        setFitnessId(data.fit_id);
      }
    } catch (error) {
      console.error('Error in loadFitnessId:', error);
    }
  }, [ownerData?.owner_name]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå
  const loadBankAccount = useCallback(async () => {
    if (!fitnessId) return;

    setLoading(true);
    try {
      const result = await getPartnerBankAccount(fitnessId);
      if (result.success) {
        setBankAccountData({
          partner_bank_account: result.data.partner_bank_account || '',
          partner_bank_name: result.data.partner_bank_name || '',
          partner_account_name: result.data.partner_account_name || '',
          partner_promptpay_id: result.data.partner_promptpay_id || '',
          revenue_split_percentage: result.data.revenue_split_percentage || 80.00
        });
      }
    } catch (error) {
      console.error('Error loading bank account:', error);
    } finally {
      setLoading(false);
    }
  }, [fitnessId]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
  const loadTransfers = useCallback(async () => {
    if (!fitnessId) return;

    try {
      const result = await getPartnerTransfers(fitnessId);
      if (result.success) {
        setTransfers(result.data);
      }
    } catch (error) {
      console.error('Error loading transfers:', error);
    }
  }, [fitnessId]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
  const loadRevenueStats = useCallback(async () => {
    if (!fitnessId) return;

    try {
      const result = await calculatePartnerRevenue(fitnessId);
      if (result.success) {
        setRevenueStats(result.data);
      }
    } catch (error) {
      console.error('Error loading revenue stats:', error);
    }
  }, [fitnessId]);

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setBankAccountData(prev => ({
      ...prev,
      [name]: value
    }));

    // ‡∏•‡πâ‡∏≤‡∏á error ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  const handleSaveBankAccount = async () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const validation = validateBankAccountData(bankAccountData);
    if (!validation.isValid) {
      setErrors(validation.errors);
      return;
    }

    setSaving(true);
    try {
      const result = await updatePartnerBankAccount(fitnessId, bankAccountData);
      if (result.success) {
        alert('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        setShowAccountForm(false);
        setErrors({});
        loadBankAccount(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      } else {
        alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.error);
      }
    } catch (error) {
      console.error('Error saving bank account:', error);
      alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
    } finally {
      setSaving(false);
    }
  };

  // Copy ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
  const copyToClipboard = (text, label) => {
    navigator.clipboard.writeText(text).then(() => {
      alert(`üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å${label}‡πÅ‡∏•‡πâ‡∏ß: ${text}`);
    }).catch(err => {
      console.error('Error copying to clipboard:', err);
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ');
    });
  };

  // Format functions
  const formatBankAccount = (account) => {
    if (!account) return '-';
    return account.replace(/(\d{3})(\d{1})(\d{5})(\d{1})/, '$1-$2-$3-$4');
  };

  const formatDate = (dateString) => {
    if (!dateString) return '-';
    return new Date(dateString).toLocaleDateString('th-TH');
  };

  const formatStatus = (status) => {
    const statusMap = {
      'pending': '‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      'processing': 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      'completed': '‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
      'failed': '‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
      'cancelled': 'üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    };
    return statusMap[status] || status;
  };

  // Initialize data
  useEffect(() => {
    loadFitnessId();
  }, [loadFitnessId]);

  useEffect(() => {
    if (fitnessId) {
      loadBankAccount();
      loadTransfers();
      loadRevenueStats();
    }
  }, [fitnessId, loadBankAccount, loadTransfers, loadRevenueStats]);

  if (loading) {
    return <div className="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
  }

  if (!fitnessId) {
    return (
      <div className="partner-bank-management">
        <div className="empty-state">
          <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™</h3>
          <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
        </div>
      </div>
    );
  }

  return (
    <div className="partner-bank-management">
      <div className="section-header">
        <h2>üè¶ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</h2>
        <div className="header-actions">
          {!bankAccountData.partner_bank_account && (
            <button 
              className="btn-primary"
              onClick={() => setShowAccountForm(true)}
            >
              + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
            </button>
          )}
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="tab-navigation">
        <button 
          className={`tab-btn ${activeTab === 'account' ? 'active' : ''}`}
          onClick={() => setActiveTab('account')}
        >
          üè¶ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
        </button>
        <button 
          className={`tab-btn ${activeTab === 'transfers' ? 'active' : ''}`}
          onClick={() => setActiveTab('transfers')}
        >
          üí∏ ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
        </button>
        <button 
          className={`tab-btn ${activeTab === 'revenue' ? 'active' : ''}`}
          onClick={() => setActiveTab('revenue')}
        >
          üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
        </button>
      </div>

      {/* Account Tab */}
      {activeTab === 'account' && (
        <div className="account-tab">
          {bankAccountData.partner_bank_account ? (
            <div className="account-display">
              <div className="account-card">
                <h3>üí≥ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</h3>
                <div className="account-details">
                  <div className="detail-row">
                    <span className="label">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:</span>
                    <span className="value">{bankAccountData.partner_bank_name}</span>
                  </div>
                  <div className="detail-row">
                    <span className="label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</span>
                    <span className="value">
                      {formatBankAccount(bankAccountData.partner_bank_account)}
                      <button 
                        className="copy-btn"
                        onClick={() => copyToClipboard(bankAccountData.partner_bank_account, '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ')}
                      >
                        üìã
                      </button>
                    </span>
                  </div>
                  <div className="detail-row">
                    <span className="label">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</span>
                    <span className="value">
                      {bankAccountData.partner_account_name}
                      <button 
                        className="copy-btn"
                        onClick={() => copyToClipboard(bankAccountData.partner_account_name, '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ')}
                      >
                        üìã
                      </button>
                    </span>
                  </div>
                  {bankAccountData.partner_promptpay_id && (
                    <div className="detail-row">
                      <span className="label">PromptPay ID:</span>
                      <span className="value">
                        {bankAccountData.partner_promptpay_id}
                        <button 
                          className="copy-btn"
                          onClick={() => copyToClipboard(bankAccountData.partner_promptpay_id, 'PromptPay ID')}
                        >
                          üìã
                        </button>
                      </span>
                    </div>
                  )}
                  <div className="detail-row">
                    <span className="label">‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ:</span>
                    <span className="value">
                      ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå {bankAccountData.revenue_split_percentage}% | 
                      ‡∏£‡∏∞‡∏ö‡∏ö {(100 - bankAccountData.revenue_split_percentage).toFixed(2)}%
                    </span>
                  </div>
                </div>
                <div className="account-actions">
                  <button 
                    className="btn-secondary"
                    onClick={() => setShowAccountForm(true)}
                  >
                    ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div className="empty-state">
              <h3>üè¶ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</h3>
              <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</p>
              <button 
                className="btn-primary"
                onClick={() => setShowAccountForm(true)}
              >
                + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
              </button>
            </div>
          )}
        </div>
      )}

      {/* Transfers Tab */}
      {activeTab === 'transfers' && (
        <div className="transfers-tab">
          <h3>üí∏ ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</h3>
          {transfers.length > 0 ? (
            <div className="transfers-list">
              {transfers.map((transfer) => (
                <div key={transfer.transfer_id} className="transfer-card">
                  <div className="transfer-header">
                    <span className="transfer-amount">‡∏ø{transfer.partner_amount?.toLocaleString()}</span>
                    <span className={`transfer-status ${transfer.transfer_status}`}>
                      {formatStatus(transfer.transfer_status)}
                    </span>
                  </div>
                  <div className="transfer-details">
                    <div className="detail-row">
                      <span className="label">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°:</span>
                      <span className="value">‡∏ø{transfer.total_amount?.toLocaleString()}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:</span>
                      <span className="value">‡∏ø{transfer.system_amount?.toLocaleString()}</span>
                    </div>
                    <div className="detail-row">
                      <span className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:</span>
                      <span className="value">{formatDate(transfer.created_at)}</span>
                    </div>
                    {transfer.transfer_date && (
                      <div className="detail-row">
                        <span className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô:</span>
                        <span className="value">{formatDate(transfer.transfer_date)}</span>
                      </div>
                    )}
                    {transfer.transfer_reference && (
                      <div className="detail-row">
                        <span className="label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:</span>
                        <span className="value">{transfer.transfer_reference}</span>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="empty-state">
              <h3>üí∏ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</h3>
              <p>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
            </div>
          )}
        </div>
      )}

      {/* Revenue Tab */}
      {activeTab === 'revenue' && (
        <div className="revenue-tab">
          <h3>üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</h3>
          {revenueStats ? (
            <div className="revenue-stats">
              <div className="stats-grid">
                <div className="stat-card">
                  <div className="stat-icon">üí∞</div>
                  <div className="stat-content">
                    <h4>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°</h4>
                    <span className="stat-value">‡∏ø{revenueStats.totalRevenue?.toLocaleString()}</span>
                  </div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">ü§ù</div>
                  <div className="stat-content">
                    <h4>‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå</h4>
                    <span className="stat-value">‡∏ø{revenueStats.partnerAmount?.toLocaleString()}</span>
                  </div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">üè¢</div>
                  <div className="stat-content">
                    <h4>‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</h4>
                    <span className="stat-value">‡∏ø{revenueStats.systemAmount?.toLocaleString()}</span>
                  </div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">‚úÖ</div>
                  <div className="stat-content">
                    <h4>‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß</h4>
                    <span className="stat-value">‡∏ø{revenueStats.completedAmount?.toLocaleString()}</span>
                  </div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">üìä</div>
                  <div className="stat-content">
                    <h4>‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h4>
                    <span className="stat-value">{revenueStats.totalTransfers} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</span>
                  </div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">‚è≥</div>
                  <div className="stat-content">
                    <h4>‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h4>
                    <span className="stat-value">{revenueStats.pendingTransfers} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</span>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="empty-state">
              <h3>üìä ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</h3>
              <p>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
            </div>
          )}
        </div>
      )}

      {/* Account Form Modal */}
      {showAccountForm && (
        <div className="modal-overlay" onClick={() => setShowAccountForm(false)}>
          <div className="modal-content account-form" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>üè¶ {bankAccountData.partner_bank_account ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' : '‡πÄ‡∏û‡∏¥‡πà‡∏°'}‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</h3>
              <button
                className="btn-close"
                onClick={() => setShowAccountForm(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="form-grid">
                <div className="form-group">
                  <label>‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ *</label>
                  <select
                    name="partner_bank_name"
                    value={bankAccountData.partner_bank_name}
                    onChange={handleInputChange}
                    className={`form-input ${errors.partner_bank_name ? 'error' : ''}`}
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</option>
                    {THAI_BANKS.map(bank => (
                      <option key={bank.code} value={bank.name}>
                        {bank.name}
                      </option>
                    ))}
                  </select>
                  {errors.partner_bank_name && (
                    <span className="error-text">{errors.partner_bank_name}</span>
                  )}
                </div>

                <div className="form-group">
                  <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ *</label>
                  <input
                    type="text"
                    name="partner_bank_account"
                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (10-12 ‡∏´‡∏•‡∏±‡∏Å)"
                    value={bankAccountData.partner_bank_account}
                    onChange={handleInputChange}
                    className={`form-input ${errors.partner_bank_account ? 'error' : ''}`}
                    maxLength="12"
                  />
                  {errors.partner_bank_account && (
                    <span className="error-text">{errors.partner_bank_account}</span>
                  )}
                </div>

                <div className="form-group">
                  <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ *</label>
                  <input
                    type="text"
                    name="partner_account_name"
                    placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
                    value={bankAccountData.partner_account_name}
                    onChange={handleInputChange}
                    className={`form-input ${errors.partner_account_name ? 'error' : ''}`}
                  />
                  {errors.partner_account_name && (
                    <span className="error-text">{errors.partner_account_name}</span>
                  )}
                </div>

                <div className="form-group">
                  <label>PromptPay ID (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
                  <input
                    type="text"
                    name="partner_promptpay_id"
                    placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
                    value={bankAccountData.partner_promptpay_id}
                    onChange={handleInputChange}
                    className={`form-input ${errors.partner_promptpay_id ? 'error' : ''}`}
                  />
                  {errors.partner_promptpay_id && (
                    <span className="error-text">{errors.partner_promptpay_id}</span>
                  )}
                </div>

                <div className="form-group">
                  <label>‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (%) *</label>
                  <input
                    type="number"
                    name="revenue_split_percentage"
                    placeholder="80"
                    min="0"
                    max="100"
                    step="0.01"
                    value={bankAccountData.revenue_split_percentage}
                    onChange={handleInputChange}
                    className={`form-input ${errors.revenue_split_percentage ? 'error' : ''}`}
                  />
                  <small className="helper-text">
                    ‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {bankAccountData.revenue_split_percentage}% ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {(100 - bankAccountData.revenue_split_percentage).toFixed(2)}%
                  </small>
                  {errors.revenue_split_percentage && (
                    <span className="error-text">{errors.revenue_split_percentage}</span>
                  )}
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button
                className="btn-secondary"
                onClick={() => setShowAccountForm(false)}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                className="btn-primary"
                onClick={handleSaveBankAccount}
                disabled={saving}
              >
                {saving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PartnerBankManagement;