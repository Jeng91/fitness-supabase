import React, { useState, useEffect, useCallback } from 'react';
import supabase from '../supabaseClient';
import imageCompression from 'browser-image-compression';

const FitnessManagement = ({ 
  ownerData, 
  onUpdate,
  initialFitnessData = null 
}) => {
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  const [fitnessMode, setFitnessMode] = useState('view'); // 'create', 'edit', 'view'
  const [hasFitnessData, setHasFitnessData] = useState(false);
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™
  const [fitnessData, setFitnessData] = useState({
    fit_name: '',
    fit_price: '',
    fit_image: '',
    fit_address: '',
    fit_contact: '',
    fit_location: '',
    fit_user: ownerData?.owner_id || '',
    fit_phone: '',
    fit_dateopen: '',
    fit_dateclose: '',
  });

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI ‡πÅ‡∏•‡∏∞ Loading
  const [mainUploading, setMainUploading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [coordinates, setCoordinates] = useState({ lat: 0, lng: 0 });
  const [autoSaveStatus, setAutoSaveStatus] = useState('');

  // Load existing fitness data
  const loadExistingFitnessData = useCallback(async () => {
    if (!ownerData?.owner_id) return;

    try {
      const { data: loadedData, error } = await supabase
        .from('tbl_fitness')
        .select('*')
        .eq('owner_id', ownerData.owner_id)
        .single();

      if (error && error.code !== 'PGRST116') {
        console.error('Error loading fitness data:', error);
        return;
      }

      if (loadedData) {
        console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß:', loadedData);
        setFitnessData(loadedData);
        setCoordinates({ lat: loadedData.fit_lat || 0, lng: loadedData.fit_lng || 0 });
        setHasFitnessData(true);
        setFitnessMode('view');
        
        // Notify parent component
        if (onUpdate) {
          onUpdate(loadedData);
        }
      } else {
        console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
        setHasFitnessData(false);
        setFitnessMode('view');
      }
    } catch (error) {
      console.error('Error in loadExistingFitnessData:', error);
    }
  }, [ownerData?.owner_id, onUpdate]);

  useEffect(() => {
    if (initialFitnessData) {
      setFitnessData(initialFitnessData);
      setCoordinates({ lat: initialFitnessData.fit_lat || 0, lng: initialFitnessData.fit_lng || 0 });
      setHasFitnessData(true);
      setFitnessMode('view');
    } else if (ownerData?.owner_id) {
      loadExistingFitnessData();
    }
  }, [initialFitnessData, ownerData, loadExistingFitnessData]);

  // Fetch fitness data for logged-in user
  useEffect(() => {
    const fetchFitnessData = async () => {
      const user = await supabase.auth.getUser();
      if (user?.data?.user?.id) {
        const { data } = await supabase
          .from('tbl_fitness')
          .select('*')
          .eq('created_by', user.data.user.id)
          .single();
        if (data) {
          setFitnessData(data);
          setHasFitnessData(true);
          setFitnessMode('view');
        } else {
          setHasFitnessData(false);
          setFitnessMode('create');
        }
      }
    };
    fetchFitnessData();
  }, []);

  // Auto-save form data
  useEffect(() => {
    if (ownerData?.owner_id && fitnessData.fit_name) {
      setAutoSaveStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...');
      
      const saveTimer = setTimeout(async () => {
        try {
          setAutoSaveStatus('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...');
          
          // const saveData = {
          //   ...fitnessData,
          //   fit_lat: coordinates.lat,
          //   fit_lng: coordinates.lng,
          //   owner_id: ownerData.owner_id
          // };

          setAutoSaveStatus('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‚úì');
        } catch (error) {
          setAutoSaveStatus('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‚ùå');
        }
      }, 2000);

      return () => clearTimeout(saveTimer);
    }
  }, [fitnessData, coordinates, ownerData?.owner_id]);

  // Upload image function
  const uploadImage = async (file, isSecondary = false, setLoadingFn, onProgress) => {
    if (!file) return null;
    try {
      if (setLoadingFn) setLoadingFn(true);
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î/resize
      const options = {
        maxSizeMB: 0.5,
        maxWidthOrHeight: 1024,
        useWebWorker: true,
        onProgress: onProgress || (() => {})
      };
      const compressedFile = await imageCompression(file, options);
      if (compressedFile.size > 5 * 1024 * 1024) {
        alert('‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î');
        return null;
      }
      if (!compressedFile.type.startsWith('image/')) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
        return null;
      }
      const fileExt = compressedFile.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;
      const folder = isSecondary ? 'secondary' : 'main';
      const filePath = `${folder}/${Date.now()}/${fileName}`;
      const { error } = await supabase.storage
        .from('fitness-images')
        .upload(filePath, compressedFile, {
          cacheControl: '3600',
          upsert: false
        });
      if (error) {
        console.error('Upload error:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ' + error.message);
        return null;
      }
      const { data: { publicUrl } } = supabase.storage
        .from('fitness-images')
        .getPublicUrl(filePath);
      return publicUrl;
    } catch (error) {
      console.error('Error:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
      return null;
    } finally {
      if (setLoadingFn) setLoadingFn(false);
    }
  };

  // Save fitness changes
  const saveFitnessChanges = async () => {
    if (!fitnessData.fit_name?.trim()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™');
      return;
    }

    if (!fitnessData.fit_price || fitnessData.fit_price <= 0) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    setSaving(true);
    try {
      const user = await supabase.auth.getUser();
      const saveData = {
        fit_name: fitnessData.fit_name,
        fit_price: fitnessData.fit_price,
        fit_image: fitnessData.fit_image,
        fit_address: fitnessData.fit_address,
        fit_contact: fitnessData.fit_contact,
        fit_location: fitnessData.fit_location,
        fit_user: fitnessData.fit_user,
        fit_phone: fitnessData.fit_phone,
        fit_dateopen: fitnessData.fit_dateopen,
        fit_dateclose: fitnessData.fit_dateclose,
        created_by: user.data.user.id,
        fit_moredetails: fitnessData.fit_moredetails || '', // ‡∏™‡πà‡∏á string ‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ null
      };

      let result;
      if (fitnessMode === 'create' || !hasFitnessData) {
        // Create new fitness
        result = await supabase
          .from('tbl_fitness')
          .insert(saveData)
          .select()
          .single();
      } else {
        // Update existing fitness
        result = await supabase
          .from('tbl_fitness')
          .update(saveData)
          .eq('owner_id', ownerData.owner_id)
          .select()
          .single();
      }

      if (result.error) {
        console.error('Error saving fitness:', result.error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + result.error.message);
        return;
      }

      console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result.data);
      setFitnessData(result.data);
      setHasFitnessData(true);
      setFitnessMode('view');
      
      // Notify parent component
      if (onUpdate) {
        onUpdate(result.data);
      }

      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    } catch (error) {
      console.error('Error:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setSaving(false);
    }
  };

  // Handle input changes
  const handleInputChange = (field, value) => {
    setFitnessData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <div className="fitness-management">
      <div className="section-header">
        <h2>üèãÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™</h2>
        <div className="header-actions">
          {hasFitnessData ? (
            <>
              {fitnessMode === 'view' ? (
                <button
                  className="btn-primary"
                  onClick={() => setFitnessMode('edit')}
                >
                  ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </button>
              ) : (
                <div className="edit-actions">
                  <button
                    className="btn-primary"
                    onClick={saveFitnessChanges}
                    disabled={saving}
                  >
                    {saving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á'}
                  </button>
                  <button
                    className="btn-secondary"
                    onClick={() => {
                      setFitnessMode('view');
                      loadExistingFitnessData();
                    }}
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                </div>
              )}
            </>
          ) : (
            <button
              className="btn-primary"
              onClick={() => setFitnessMode('create')}
            >
              + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™
            </button>
          )}
        </div>
      </div>

      {autoSaveStatus && (
        <div className={`auto-save-status ${autoSaveStatus.includes('‚ùå') ? 'error' : 
          autoSaveStatus.includes('‚úì') ? 'success' : 'loading'}`}>
          {autoSaveStatus}
        </div>
      )}

      {fitnessMode === 'view' && hasFitnessData ? (
        // View Mode
        <div className="fitness-view">
          <div className="fitness-card">
            <div className="fitness-images">
              {fitnessData.fit_image && (
                <img 
                  src={fitnessData.fit_image} 
                  alt="‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å"
                  className="fitness-main-image"
                />
              )}
              {fitnessData.fit_image2 && (
                <img 
                  src={fitnessData.fit_image2} 
                  alt="‡∏£‡∏π‡∏õ‡πÄ‡∏™‡∏£‡∏¥‡∏°"
                  className="fitness-secondary-image"
                />
              )}
            </div>
            
            <div className="fitness-details">
              <h3>{fitnessData.fit_name}</h3>
              <p className="price">‡∏ø{fitnessData.fit_price?.toLocaleString()}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
              <p className="description">{fitnessData.fit_detail}</p>
              <p className="location">üìç {fitnessData.fit_location}</p>
              {coordinates.lat && coordinates.lng && (
                <p className="coordinates">
                  üåç ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {coordinates.lat.toFixed(6)}, 
                  ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {coordinates.lng.toFixed(6)}
                </p>
              )}
            </div>
          </div>
        </div>
      ) : (fitnessMode === 'create' || fitnessMode === 'edit') ? (
        // Create/Edit Mode
        <div className="fitness-form">
          <div className="form-grid">
            <div className="form-group">
              <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ *</label>
              <input
                type="text"
                value={fitnessData.fit_name}
                onChange={(e) => handleInputChange('fit_name', e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™"
              />
            </div>

            <div className="form-group">
              <label>‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ö‡∏≤‡∏ó) *</label>
              <input
                type="number"
                value={fitnessData.fit_price}
                onChange={(e) => handleInputChange('fit_price', e.target.value)}
                placeholder="0"
                min="0"
              />
            </div>

            <div className="form-group">
              <label>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å</label>
              <input
                type="file"
                accept="image/*"
                onChange={async (e) => {
                  const file = e.target.files[0];
                  if (!file) return;
                  const imageUrl = await uploadImage(file, false, setMainUploading);
                  if (imageUrl) {
                    handleInputChange('fit_image', imageUrl);
                  }
                }}
                disabled={mainUploading}
              />
              {mainUploading && <p className="uploading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î...</p>}
              {/* ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° progress bar ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà */}
              {fitnessData.fit_image && (
                <div className="image-preview-main">
                  <img src={fitnessData.fit_image} alt="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å" className="image-preview" />
                  <button type="button" className="remove-image-btn" onClick={() => handleInputChange('fit_image', '')}>‡∏•‡∏ö</button>
                </div>
              )}
            </div>

            <div className="form-group">
              <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á</label>
              <input
                type="text"
                value={fitnessData.fit_address || ''}
                onChange={(e) => handleInputChange('fit_address', e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™"
              />
            </div>

            <div className="form-group">
              <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</label>
              <input
                type="text"
                value={fitnessData.fit_phone || ''}
                onChange={(e) => handleInputChange('fit_phone', e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
              />
            </div>

            <div className="form-group">
              <label>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ (‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ)</label>
              <input
                type="text"
                value={fitnessData.fit_contact || ''}
                onChange={(e) => handleInputChange('fit_contact', e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
              />
            </div>
            <div className="form-group">
              <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î</label>
              <input
                type="time"
                value={fitnessData.fit_dateopen || ''}
                onChange={(e) => handleInputChange('fit_dateopen', e.target.value)}
              />
            </div>

            <div className="form-group">
              <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î</label>
              <input
                type="time"
                value={fitnessData.fit_dateclose || ''}
                onChange={(e) => handleInputChange('fit_dateclose', e.target.value)}
              />
            </div>

            <div className="form-group">
              <label>‡∏û‡∏¥‡∏Å‡∏±‡∏î (Location)</label>
              <input
                type="text"
                value={fitnessData.fit_location || ''}
                onChange={(e) => handleInputChange('fit_location', e.target.value)}
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ ‡πÄ‡∏ä‡πà‡∏ô 16.12345, 103.12345"
              />
            </div>
          </div>

           <div className="form-group">
              <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
              <textarea
                value={fitnessData.fit_moredetails || ''}
                onChange={(e) => handleInputChange('fit_moredetails', e.target.value)}
                placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™"
                
              />
            </div>

          {(fitnessMode === 'create' || fitnessMode === 'edit') && (
            <div className="form-actions">
              <button
                className="btn-primary"
                onClick={saveFitnessChanges}
                disabled={saving}
              >
                {saving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : (fitnessMode === 'create' ? '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á')}
              </button>
              <button
                className="btn-secondary"
                onClick={() => {
                  setFitnessMode('view');
                  loadExistingFitnessData();
                }}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          )}
        </div>
      ) : null}
    </div>
  );
};

export default FitnessManagement;