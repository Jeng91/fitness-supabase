import React, { useState, useEffect } from 'react';
import './PaymentApproval.css';

const PaymentApproval = () => {
  const [pendingPayments, setPendingPayments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [processing, setProcessing] = useState(null);

  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  const mockPendingPayments = React.useMemo(() => [
    {
      id: '1',
      transaction_id: 'txn_1728352800123_abc123',
      amount: 500,
      description: '‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
      slip_filename: 'slip_payment_001.jpg',
      created_at: new Date().toISOString(),
      user_profiles: {
        full_name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
        email: 'somchai@email.com',
        phone_number: '081-234-5678'
      }
    },
    {
      id: '2', 
      transaction_id: 'txn_1728352900456_def456',
      amount: 1500,
      description: '‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
      slip_filename: 'slip_payment_002.jpg',
      created_at: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
      user_profiles: {
        full_name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°',
        email: 'somying@email.com',
        phone_number: '082-345-6789'
      }
    }
  ], []);

  useEffect(() => {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡πÅ‡∏•‡∏∞ mock data
    setTimeout(() => {
      const storedPayments = JSON.parse(localStorage.getItem('pending_payments') || '[]');
      const allPayments = [...mockPendingPayments, ...storedPayments];
      setPendingPayments(allPayments);
      setLoading(false);
    }, 1000);
  }, [mockPendingPayments]);

  const handleApprovePayment = async (paymentId, transactionId) => {
    try {
      setProcessing(paymentId);
      
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      await new Promise(resolve => setTimeout(resolve, 1500));

      // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏•‡∏∞ localStorage
      setPendingPayments(prev => {
        const updated = prev.filter(payment => payment.id !== paymentId);
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage
        const storedPayments = updated.filter(p => !mockPendingPayments.find(mock => mock.id === p.id));
        localStorage.setItem('pending_payments', JSON.stringify(storedPayments));
        return updated;
      });

      alert(`‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ${transactionId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    } catch (error) {
      console.error('Error approving payment:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥');
    } finally {
      setProcessing(null);
    }
  };

  const handleRejectPayment = async (paymentId, reason = '') => {
    try {
      setProcessing(paymentId);
      
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
      await new Promise(resolve => setTimeout(resolve, 1500));

      // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏•‡∏∞ localStorage
      setPendingPayments(prev => {
        const updated = prev.filter(payment => payment.id !== paymentId);
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage
        const storedPayments = updated.filter(p => !mockPendingPayments.find(mock => mock.id === p.id));
        localStorage.setItem('pending_payments', JSON.stringify(storedPayments));
        return updated;
      });

      alert(`‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß${reason ? `\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}` : ''}`);
    } catch (error) {
      console.error('Error rejecting payment:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò');
    } finally {
      setProcessing(null);
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('th-TH', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatAmount = (amount) => {
    return new Intl.NumberFormat('th-TH').format(amount);
  };

  if (loading) {
    return (
      <div className="payment-approval-container">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="payment-approval-container">
      <div className="approval-header">
        <h2>üîç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
        <div className="approval-stats">
          <span className="pending-count">
            ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: {pendingPayments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </span>
        </div>
      </div>

      {pendingPayments.length === 0 ? (
        <div className="no-pending-payments">
          <div className="empty-icon">‚úÖ</div>
          <h3>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h3>
          <p>‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
        </div>
      ) : (
        <div className="payments-grid">
          {pendingPayments.map((payment) => (
            <div key={payment.id} className="payment-card">
              <div className="payment-header">
                <div className="transaction-info">
                  <h4>#{payment.transaction_id}</h4>
                  <span className="payment-date">
                    {formatDate(payment.created_at)}
                  </span>
                </div>
                <div className="payment-amount">
                  ‡∏ø{formatAmount(payment.amount)}
                </div>
              </div>

              <div className="payment-details">
                <div className="detail-row">
                  <span className="label">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</span>
                  <span className="value">
                    {payment.user_profiles?.full_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                  </span>
                </div>
                <div className="detail-row">
                  <span className="label">‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</span>
                  <span className="value">
                    {payment.user_profiles?.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                  </span>
                </div>
                <div className="detail-row">
                  <span className="label">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</span>
                  <span className="value">{payment.description}</span>
                </div>
                <div className="detail-row">
                  <span className="label">‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ:</span>
                  <span className="value">{payment.slip_filename}</span>
                </div>
              </div>

              <div className="payment-actions">
                <button
                  className="approve-btn"
                  onClick={() => handleApprovePayment(payment.id, payment.transaction_id)}
                  disabled={processing === payment.id}
                >
                  {processing === payment.id ? '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'}
                </button>
                <button
                  className="reject-btn"
                  onClick={() => {
                    const reason = prompt('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö):');
                    if (reason !== null) {
                      handleRejectPayment(payment.id, reason);
                    }
                  }}
                  disabled={processing === payment.id}
                >
                  ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default PaymentApproval;