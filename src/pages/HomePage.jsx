import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import supabase from '../supabaseClient';
import Layout from '../components/Layout';
import '../App.css';

const HomePage = () => {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [favorites, setFavorites] = useState([]);
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
  const formatTime = (timeString) => {
    if (!timeString) return timeString;
    return timeString
      .replace(/(\d+):00\.00/g, '$1:00')
      .replace(/(\d+)\.00\.00/g, '$1.00')
      .replace(/(\d+)\.00$/g, '$1')
      .replace(/(\d+):00:00/g, '$1:00')
      .replace(/\.00\s*-\s*(\d+)\.00/g, ' - $1')
      .replace(/(\d+)\.00/g, '$1');
  };

  const [fitnessData, setFitnessData] = useState([]);
  const [filteredFitnessData, setFilteredFitnessData] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [priceFilter, setPriceFilter] = useState('all');
  const [sortBy, setSortBy] = useState('newest');
  const [showImageModal, setShowImageModal] = useState(false);
  const [showImageGallery, setShowImageGallery] = useState(false);
  const [selectedFitness, setSelectedFitness] = useState(null);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);

  // Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™
  const loadFitnessData = useCallback(async () => {
    try {
      const { data: fitnessData, error: fitnessError } = await supabase
        .from('tbl_fitness')
        .select('*')
        .order('created_at', { ascending: false });

      if (fitnessError) {
        console.error('Error loading fitness data:', fitnessError);
        return;
      }
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö format ‡πÄ‡∏î‡∏¥‡∏°
      const transformedData = fitnessData.map(item => ({
        id: item.fit_id,
        name: item.fit_name,
        price: item.fit_price,
        location: item.fit_address,
        image: item.fit_image,
        fit_image2: item.fit_image2,
        fit_image3: item.fit_image3,
        fit_image4: item.fit_image4,
        contact: item.fit_contact,
        fit_location: item.fit_location,
        user: item.fit_user,
        phone: item.fit_phone,
        openTime: formatTime(item.fit_open_time),
        closeTime: formatTime(item.fit_close_time),
        description: item.fit_description,
        fit_id: item.fit_id,
        ...item
      }));

      setFitnessData(transformedData);
      setFilteredFitnessData(transformedData);
      
    } catch (error) {
      console.error('Error in loadFitnessData:', error);
    }
  }, []);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication
  useEffect(() => {
    const checkAuth = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      setUser(user);
    };
    
    checkAuth();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      setUser(session?.user || null);
    });

    return () => subscription.unsubscribe();
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    loadFitnessData();
    if (user) {
      loadFavorites();
    }
  }, [loadFitnessData, user]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
  const loadFavorites = async () => {
    if (!user) return;
    
    try {
      const { data, error } = await supabase
        .from('tbl_favorites')
        .select('fitness_id')
        .eq('user_id', user.id);

      if (!error && data) {
        setFavorites(data.map(item => item.fitness_id));
      }
    } catch (error) {
      console.error('Error loading favorites:', error);
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
  const toggleFavorite = async (fitnessId) => {
    if (!user) {
      setShowLoginModal(true);
      return;
    }

    try {
      const isFavorite = favorites.includes(fitnessId);
      
      if (isFavorite) {
        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
        const { error } = await supabase
          .from('tbl_favorites')
          .delete()
          .eq('user_id', user.id)
          .eq('fitness_id', fitnessId);

        if (!error) {
          setFavorites(favorites.filter(id => id !== fitnessId));
        }
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
        const { error } = await supabase
          .from('tbl_favorites')
          .insert([
            {
              user_id: user.id,
              fitness_id: fitnessId
            }
          ]);

        if (!error) {
          setFavorites([...favorites, fitnessId]);
        }
      }
    } catch (error) {
      console.error('Error toggling favorite:', error);
    }
  };

  // Filter ‡πÅ‡∏•‡∏∞ Search
  useEffect(() => {
    let filtered = [...fitnessData];

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (searchTerm) {
      filtered = filtered.filter(fitness =>
        fitness.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        fitness.location?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        fitness.user?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
    if (priceFilter !== 'all') {
      switch (priceFilter) {
        case 'low':
          filtered = filtered.filter(fitness => fitness.price <= 50);
          break;
        case 'medium':
          filtered = filtered.filter(fitness => fitness.price > 50 && fitness.price <= 100);
          break;
        case 'high':
          filtered = filtered.filter(fitness => fitness.price > 100);
          break;
        default:
          break;
      }
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    switch (sortBy) {
      case 'newest':
        filtered.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
        break;
      case 'oldest':
        filtered.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
        break;
      case 'price-low':
        filtered.sort((a, b) => a.price - b.price);
        break;
      case 'price-high':
        filtered.sort((a, b) => b.price - a.price);
        break;
      case 'name':
        filtered.sort((a, b) => a.name.localeCompare(b.name));
        break;
      default:
        break;
    }

    setFilteredFitnessData(filtered);
  }, [fitnessData, searchTerm, priceFilter, sortBy]);

  const handleFitnessClick = (fitness) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user login ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (!user) {
      setShowLoginModal(true);
      return;
    }
    
    setSelectedFitness(fitness);
    navigate(`/fitness/${fitness.fit_id}`);
  };

  const handleImageClick = (fitness, imageIndex = 0) => {
    setSelectedFitness(fitness);
    setSelectedImageIndex(imageIndex);
    setShowImageModal(true);
  };

  return (
    <Layout>
      {/* Main Content */}
      <div className="home-content">
        <div className="fitness-section">
          <div className="fitness-header">
            <div className="fitness-title">
              <h2>‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ</h2>
              <p className="fitness-count">‡∏û‡∏ö {filteredFitnessData.length} ‡πÅ‡∏´‡πà‡∏á ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {fitnessData.length} ‡πÅ‡∏´‡πà‡∏á</p>
            </div>
            <button 
              className="refresh-btn" 
              onClick={loadFitnessData}
              title="‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            >
              üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
            </button>
          </div>
          
          {/* ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á */}
          <div className="search-filter-section">
            <div className="search-box">
              <input
                type="text"
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™, ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
              <span className="search-icon">üîç</span>
            </div>
            
            <div className="filter-controls">
              <select 
                value={priceFilter} 
                onChange={(e) => setPriceFilter(e.target.value)}
                className="filter-select"
              >
                <option value="all">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                <option value="low">‚â§ 50 ‡∏ö‡∏≤‡∏ó</option>
                <option value="medium">51-100 ‡∏ö‡∏≤‡∏ó</option>
                <option value="high"> 100 ‡∏ö‡∏≤‡∏ó</option>
              </select>
              
              <select 
                value={sortBy} 
                onChange={(e) => setSortBy(e.target.value)}
                className="filter-select"
              >
                <option value="newest">‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</option>
                <option value="oldest">‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</option>
                <option value="price-low">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥-‡∏™‡∏π‡∏á</option>
                <option value="price-high">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á-‡∏ï‡πà‡∏≥</option>
                <option value="name">‡∏ä‡∏∑‡πà‡∏≠ A-Z</option>
              </select>
            </div>
          </div>

          {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™ */}
          <div className="fitness-grid">
            {filteredFitnessData.length > 0 ? (
              filteredFitnessData.map((fitness) => (
                <div key={fitness.id} className="fitness-card">
                  <div className="fitness-image-container">
                    <img 
                      src={fitness.image || '/placeholder-gym.jpg'} 
                      alt={fitness.name}
                      className="fitness-image"
                      onClick={() => handleImageClick(fitness, 0)}
                    />
                    
                    {/* Favorite Button */}
                    <button
                      className={`favorite-btn ${favorites.includes(fitness.fit_id) ? 'favorited' : ''}`}
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleFavorite(fitness.fit_id);
                      }}
                      title={favorites.includes(fitness.fit_id) ? '‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î'}
                    >
                      {favorites.includes(fitness.fit_id) ? '‚ù§Ô∏è' : 'ü§ç'}
                    </button>
                  </div>
                  
                  <div className="fitness-info">
                    <h3 className="fitness-name">{fitness.name}</h3>
                    <p className="fitness-location">
                      <span className="location-icon">üìç</span>
                      {fitness.location}
                    </p>
                    
                    <div className="fitness-price-section">
                      <span className="price-label">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà</span>
                      <div className="fitness-price">
                        <span className="amount">{fitness.price}</span>
                        <span className="currency"> ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏ô</span>
                      </div>
                    </div>

                    {/* Rating Badge - ‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ */}
                    <div className="rating-badge-inline">
                      <span className="rating-score">9.6</span>
                      <div className="rating-text">
                        <span>‡πÅ‡∏™‡∏ô‡∏á‡∏µ‡πà‡πÄ‡∏ã</span>
                        <small>138 ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏°‡∏±‡∏Å‡∏ó‡∏µ‡πà</small>
                      </div>
                    </div>
                    
                    <div className="fitness-actions">
                      <button 
                        className="view-details-btn"
                        onClick={() => handleFitnessClick(fitness)}
                      >
                        ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                      </button>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className="no-fitness">
                <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h3>
                <p>‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Image Modal */}
      {showImageModal && selectedFitness && (
        <div className="modal-overlay" onClick={() => setShowImageModal(false)}>
          <div className="image-modal" onClick={e => e.stopPropagation()}>
            <button className="close-btn" onClick={() => setShowImageModal(false)}>√ó</button>
            <img 
              src={selectedFitness.image} 
              alt={selectedFitness.name}
              className="modal-image"
            />
          </div>
        </div>
      )}

      {/* Image Gallery Modal */}
      {showImageGallery && selectedFitness && (
        <div className="modal-overlay" onClick={() => setShowImageGallery(false)}>
          <div className="gallery-modal" onClick={e => e.stopPropagation()}>
            <button className="close-btn" onClick={() => setShowImageGallery(false)}>√ó</button>
            <div className="gallery-content">
              <img 
                src={[
                  selectedFitness.image,
                  selectedFitness.fit_image2,
                  selectedFitness.fit_image3,
                  selectedFitness.fit_image4
                ].filter(img => img)[selectedImageIndex]} 
                alt={selectedFitness.name}
                className="gallery-image"
              />
              <div className="gallery-nav">
                <button 
                  className="nav-btn prev"
                  onClick={() => {
                    const images = [
                      selectedFitness.image,
                      selectedFitness.fit_image2,
                      selectedFitness.fit_image3,
                      selectedFitness.fit_image4
                    ].filter(img => img);
                    const prevIndex = selectedImageIndex > 0 ? selectedImageIndex - 1 : images.length - 1;
                    setSelectedImageIndex(prevIndex);
                  }}
                >
                  ‚Äπ ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                </button>
                <button 
                  className="nav-btn next"
                  onClick={() => {
                    const images = [
                      selectedFitness.image,
                      selectedFitness.fit_image2,
                      selectedFitness.fit_image3,
                      selectedFitness.fit_image4
                    ].filter(img => img);
                    const nextIndex = selectedImageIndex < images.length - 1 ? selectedImageIndex + 1 : 0;
                    setSelectedImageIndex(nextIndex);
                  }}
                >
                  ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Ä∫
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Login Required Modal */}
      {showLoginModal && (
        <div className="modal-overlay" onClick={() => setShowLoginModal(false)}>
          <div className="login-required-modal" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3>üîê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h3>
              <button className="close-btn" onClick={() => setShowLoginModal(false)}>√ó</button>
            </div>
            <div className="modal-body">
              <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™</p>
              <div className="modal-actions">
                <button 
                  className="login-btn-modal"
                  onClick={() => {
                    setShowLoginModal(false);
                    navigate('/login');
                  }}
                >
                  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                </button>
                <button 
                  className="register-btn-modal"
                  onClick={() => {
                    setShowLoginModal(false);
                    navigate('/register');
                  }}
                >
                  ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </Layout>
  );
};

export default HomePage;