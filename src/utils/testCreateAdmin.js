// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Admin
// ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ: ‡πÄ‡∏õ‡∏¥‡∏î Developer Console ‡πÅ‡∏•‡∏∞ paste script ‡∏ô‡∏µ‡πâ

// Import the functions (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô console)
const createAdminTest = async () => {
  try {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Admin...');
    
    // ‡∏ï‡πâ‡∏≠‡∏á import supabase client ‡∏Å‡πà‡∏≠‡∏ô
    const { createClient } = require('@supabase/supabase-js');
    
    const supabaseUrl = "https://ibtvipouiddtvsdsccfc.supabase.co";
    const supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlidHZpcG91aWRkdHZzZHNjY2ZjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxMTg2MjUsImV4cCI6MjA2ODY5NDYyNX0.vTAJAsP-UXPLpaHoiU5SW8OTdouqvLJ2RhM8l5yzi6g";
    
    const supabase = createClient(supabaseUrl, supabaseAnonKey);
    
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á auth user
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: 'jjj@admin',
      password: '12346'
    });
    
    if (authError && !authError.message.includes('already registered')) {
      throw authError;
    }
    
    let userId = authData?.user?.id;
    
    // ‡∏ñ‡πâ‡∏≤ user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    if (authError?.message.includes('already registered')) {
      const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
        email: 'jjj@admin',
        password: '12346'
      });
      
      if (signInError) throw signInError;
      userId = signInData.user.id;
    }
    
    console.log('‚úÖ User ID:', userId);
    
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á admin record
    const adminData = {
      auth_user_id: userId,
      email: 'jjj@admin',
      full_name: 'System Administrator',
      role: 'super_admin',
      status: 'active',
      permissions: JSON.stringify({
        users: { read: true, write: true, delete: true },
        partners: { read: true, write: true, delete: true },
        bookings: { read: true, write: true, delete: true },
        payments: { read: true, write: true, delete: true },
        reviews: { read: true, write: true, delete: true },
        notifications: { read: true, write: true, delete: true },
        reports: { read: true, write: true, delete: true },
        settings: { read: true, write: true, delete: true }
      }),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const { data: newAdmin, error: insertError } = await supabase
      .from('tbl_admin')
      .insert([adminData])
      .select()
      .single();
    
    if (insertError) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ update ‡πÅ‡∏ó‡∏ô
      if (insertError.code === '23505') {
        const { data: updatedAdmin, error: updateError } = await supabase
          .from('tbl_admin')
          .update(adminData)
          .eq('auth_user_id', userId)
          .select()
          .single();
          
        if (updateError) throw updateError;
        console.log('‚úÖ Updated Admin:', updatedAdmin);
        return updatedAdmin;
      }
      throw insertError;
    }
    
    console.log('‚úÖ Created Admin:', newAdmin);
    console.log('üéâ Admin setup complete!');
    console.log('üìß Email: jjj@admin');
    console.log('üîë Password: 12346');
    
    return newAdmin;
    
  } catch (error) {
    console.error('‚ùå Error:', error);
    throw error;
  }
};

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function
// createAdminTest();