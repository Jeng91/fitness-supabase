-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.approved_payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  transaction_id text NOT NULL UNIQUE,
  user_id uuid,
  amount numeric NOT NULL,
  description text,
  slip_url text,
  slip_filename text,
  payment_type text DEFAULT 'qr_payment'::text,
  original_payment_id uuid,
  approved_by uuid,
  approved_at timestamp with time zone DEFAULT now(),
  booking_id uuid,
  membership_id uuid,
  fitness_id uuid,
  partner_id uuid,
  booking_type text CHECK (booking_type = ANY (ARRAY['daily'::text, 'monthly'::text, 'yearly'::text, 'class'::text, 'membership'::text])),
  booking_period text,
  fitness_name text,
  partner_name text,
  system_fee numeric DEFAULT 0,
  partner_revenue numeric DEFAULT 0,
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  fitness_int_id integer,
  CONSTRAINT approved_payments_pkey PRIMARY KEY (id),
  CONSTRAINT approved_payments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT approved_payments_original_payment_id_fkey FOREIGN KEY (original_payment_id) REFERENCES public.pending_payments(id),
  CONSTRAINT approved_payments_approved_by_fkey FOREIGN KEY (approved_by) REFERENCES auth.users(id)
);
CREATE TABLE public.booking_history (
  history_id uuid NOT NULL DEFAULT gen_random_uuid(),
  booking_id uuid,
  from_status character varying,
  to_status character varying,
  change_reason text,
  changed_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT booking_history_pkey PRIMARY KEY (history_id),
  CONSTRAINT booking_history_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.bookings(booking_id),
  CONSTRAINT booking_history_changed_by_fkey FOREIGN KEY (changed_by) REFERENCES auth.users(id)
);
CREATE TABLE public.bookings (
  booking_id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  fitness_id integer,
  owner_uid integer,
  booking_date date NOT NULL,
  booking_time timestamp with time zone DEFAULT now(),
  total_amount numeric NOT NULL,
  booking_status character varying DEFAULT 'pending'::character varying CHECK (booking_status::text = ANY (ARRAY['pending'::character varying, 'confirmed'::character varying, 'cancelled'::character varying, 'completed'::character varying, 'expired'::character varying]::text[])),
  notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bookings_pkey PRIMARY KEY (booking_id),
  CONSTRAINT bookings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT bookings_fitness_id_fkey FOREIGN KEY (fitness_id) REFERENCES public.tbl_fitness(fit_id),
  CONSTRAINT bookings_owner_uid_fkey FOREIGN KEY (owner_uid) REFERENCES public.tbl_owner(owner_uid)
);
CREATE TABLE public.fitness_images (
  id bigint NOT NULL DEFAULT nextval('fitness_images_id_seq'::regclass),
  fitness_id bigint NOT NULL,
  image_path text NOT NULL,
  image_url text,
  position integer DEFAULT 0,
  created_by uuid,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT fitness_images_pkey PRIMARY KEY (id),
  CONSTRAINT fitness_images_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT fitness_images_fitness_fk FOREIGN KEY (fitness_id) REFERENCES public.tbl_fitness(fit_id)
);
CREATE TABLE public.payment_splits (
  split_id uuid NOT NULL DEFAULT gen_random_uuid(),
  payment_id uuid,
  system_split_amount numeric NOT NULL,
  system_split_status character varying DEFAULT 'pending'::character varying CHECK (system_split_status::text = ANY (ARRAY['pending'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])),
  fitness_split_amount numeric NOT NULL,
  fitness_split_status character varying DEFAULT 'pending'::character varying CHECK (fitness_split_status::text = ANY (ARRAY['pending'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])),
  fitness_transfer_ref character varying,
  system_fee_ref character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT payment_splits_pkey PRIMARY KEY (split_id),
  CONSTRAINT payment_splits_payment_id_fkey FOREIGN KEY (payment_id) REFERENCES public.payments(payment_id)
);
CREATE TABLE public.payments (
  payment_id uuid NOT NULL DEFAULT gen_random_uuid(),
  booking_id uuid,
  user_id uuid,
  total_amount numeric NOT NULL,
  system_fee numeric NOT NULL,
  fitness_amount numeric NOT NULL,
  payment_method character varying DEFAULT 'credit_card'::character varying CHECK (payment_method::text = ANY (ARRAY['credit_card'::character varying, 'debit_card'::character varying, 'promptpay'::character varying, 'bank_transfer'::character varying, 'wallet'::character varying]::text[])),
  payment_status character varying DEFAULT 'pending'::character varying CHECK (payment_status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying, 'refunded'::character varying, 'cancelled'::character varying]::text[])),
  transaction_id character varying UNIQUE,
  gateway_response jsonb,
  gateway_reference character varying,
  paid_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT payments_pkey PRIMARY KEY (payment_id),
  CONSTRAINT payments_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.bookings(booking_id),
  CONSTRAINT payments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.pending_payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  transaction_id character varying NOT NULL UNIQUE,
  user_id uuid,
  amount numeric NOT NULL,
  description text,
  slip_url text,
  slip_filename character varying,
  payment_type character varying DEFAULT 'qr_payment'::character varying,
  status character varying DEFAULT 'pending'::character varying,
  booking_id uuid,
  membership_id uuid,
  admin_notes text,
  approved_by uuid,
  approved_at timestamp with time zone,
  rejected_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT pending_payments_pkey PRIMARY KEY (id),
  CONSTRAINT pending_payments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT pending_payments_approved_by_fkey FOREIGN KEY (approved_by) REFERENCES auth.users(id)
);
CREATE TABLE public.profiles (
  username text NOT NULL UNIQUE,
  useremail text NOT NULL UNIQUE,
  userage integer CHECK (userage >= 10 AND userage <= 100),
  usertel text,
  profile_image text,
  full_name text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  user_uid uuid NOT NULL UNIQUE,
  CONSTRAINT profiles_pkey PRIMARY KEY (user_uid),
  CONSTRAINT profiles_user_uid_fkey FOREIGN KEY (user_uid) REFERENCES auth.users(id)
);
CREATE TABLE public.qr_payments (
  qr_payment_id uuid NOT NULL DEFAULT gen_random_uuid(),
  transaction_id text NOT NULL UNIQUE,
  user_id uuid,
  qr_code text NOT NULL,
  qr_image_url text,
  amount numeric NOT NULL,
  currency character varying DEFAULT 'THB'::character varying,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'success'::character varying, 'failed'::character varying, 'expired'::character varying, 'cancelled'::character varying]::text[])),
  payment_method character varying DEFAULT 'qr_promptpay'::character varying,
  expires_at timestamp with time zone NOT NULL,
  paid_at timestamp with time zone,
  cancelled_at timestamp with time zone,
  gateway_response jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT qr_payments_pkey PRIMARY KEY (qr_payment_id),
  CONSTRAINT qr_payments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.refunds (
  refund_id uuid NOT NULL DEFAULT gen_random_uuid(),
  payment_id uuid,
  booking_id uuid,
  refund_amount numeric NOT NULL,
  refund_reason text,
  refund_status character varying DEFAULT 'pending'::character varying CHECK (refund_status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])),
  refund_reference character varying,
  processed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT refunds_pkey PRIMARY KEY (refund_id),
  CONSTRAINT refunds_payment_id_fkey FOREIGN KEY (payment_id) REFERENCES public.payments(payment_id),
  CONSTRAINT refunds_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.bookings(booking_id)
);
CREATE TABLE public.tbl_admin (
  admin_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  admin_name character varying NOT NULL,
  admin_password character varying,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  auth_user_id uuid,
  CONSTRAINT tbl_admin_pkey PRIMARY KEY (admin_id),
  CONSTRAINT tbl_admin_auth_user_fk FOREIGN KEY (auth_user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.tbl_class_enrollments (
  enrollment_id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  class_id integer NOT NULL,
  fitness_id integer NOT NULL,
  enrollment_date date NOT NULL DEFAULT CURRENT_DATE,
  status character varying DEFAULT 'enrolled'::character varying CHECK (status::text = ANY (ARRAY['enrolled'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])),
  payment_id uuid,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT tbl_class_enrollments_pkey PRIMARY KEY (enrollment_id),
  CONSTRAINT tbl_class_enrollments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT tbl_class_enrollments_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.tbl_classes(class_id),
  CONSTRAINT tbl_class_enrollments_fitness_id_fkey FOREIGN KEY (fitness_id) REFERENCES public.tbl_fitness(fit_id),
  CONSTRAINT tbl_class_enrollments_payment_id_fkey FOREIGN KEY (payment_id) REFERENCES public.payments(payment_id)
);
CREATE TABLE public.tbl_classes (
  class_id integer NOT NULL DEFAULT nextval('tbl_classes_class_id_seq'::regclass),
  fit_id integer,
  class_name character varying NOT NULL,
  description text,
  image_url text,
  class_time time without time zone,
  duration integer DEFAULT 60,
  instructor character varying,
  max_participants integer DEFAULT 10,
  price numeric DEFAULT 0,
  status character varying DEFAULT 'active'::character varying,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT tbl_classes_pkey PRIMARY KEY (class_id),
  CONSTRAINT tbl_classes_fit_id_fkey FOREIGN KEY (fit_id) REFERENCES public.tbl_fitness(fit_id)
);
CREATE TABLE public.tbl_equipment (
  em_id integer NOT NULL DEFAULT nextval('tbl_equipment_em_id_seq'::regclass),
  em_name character varying NOT NULL,
  em_image character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  fitness_id integer NOT NULL,
  created_by uuid,
  CONSTRAINT tbl_equipment_pkey PRIMARY KEY (em_id),
  CONSTRAINT tbl_equipment_fitness_id_fkey FOREIGN KEY (fitness_id) REFERENCES public.tbl_fitness(fit_id),
  CONSTRAINT tbl_equipment_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.tbl_favorites (
  favorite_id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  fitness_id integer NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT tbl_favorites_pkey PRIMARY KEY (favorite_id),
  CONSTRAINT tbl_favorites_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT tbl_favorites_fitness_id_fkey FOREIGN KEY (fitness_id) REFERENCES public.tbl_fitness(fit_id)
);
CREATE TABLE public.tbl_fitness (
  fit_id integer NOT NULL DEFAULT nextval('tbl_fitness_fit_id_seq'::regclass),
  fit_name character varying NOT NULL,
  fit_user character varying NOT NULL,
  fit_price character varying NOT NULL,
  fit_image text NOT NULL,
  fit_address text NOT NULL,
  fit_contact character varying NOT NULL,
  fit_dateclose time without time zone NOT NULL,
  fit_dateopen time without time zone NOT NULL,
  fit_location text NOT NULL,
  fit_moredetails text NOT NULL,
  fit_phone character varying NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  created_by uuid,
  fit_image2 text,
  fit_image3 text,
  fit_image4 text,
  fit_price_memberm numeric DEFAULT 0,
  fit_price_membery numeric DEFAULT 0,
  partner_bank_account character varying,
  partner_bank_name character varying,
  partner_account_name character varying,
  partner_promptpay_id character varying,
  revenue_split_percentage numeric DEFAULT 80.00,
  owner_id integer,
  CONSTRAINT tbl_fitness_pkey PRIMARY KEY (fit_id)
);
CREATE TABLE public.tbl_fitness_requests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  fit_name character varying NOT NULL,
  fit_type character varying,
  fit_description text,
  fit_price numeric,
  fit_duration integer,
  fit_location character varying,
  fit_contact character varying,
  fit_image text,
  owner_id integer,
  status character varying DEFAULT 'pending'::character varying,
  approved_at timestamp with time zone,
  approved_by integer,
  rejected_at timestamp with time zone,
  rejected_by integer,
  rejection_reason text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT tbl_fitness_requests_pkey PRIMARY KEY (id),
  CONSTRAINT tbl_fitness_requests_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES public.tbl_owner(owner_uid),
  CONSTRAINT tbl_fitness_requests_approved_by_fkey FOREIGN KEY (approved_by) REFERENCES public.tbl_admin(admin_id),
  CONSTRAINT tbl_fitness_requests_rejected_by_fkey FOREIGN KEY (rejected_by) REFERENCES public.tbl_admin(admin_id)
);
CREATE TABLE public.tbl_marketing_campaigns (
  campaign_id integer NOT NULL DEFAULT nextval('tbl_marketing_campaigns_campaign_id_seq'::regclass),
  fit_id integer NOT NULL,
  owner_id integer NOT NULL,
  title character varying NOT NULL,
  description text,
  email_subject character varying,
  email_content text,
  target_audience character varying,
  start_date date,
  end_date date,
  status character varying,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT tbl_marketing_campaigns_pkey PRIMARY KEY (campaign_id)
);
CREATE TABLE public.tbl_memberships (
  membership_id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  fitness_id integer NOT NULL,
  membership_type character varying NOT NULL CHECK (membership_type::text = ANY (ARRAY['monthly'::character varying, 'yearly'::character varying]::text[])),
  amount numeric NOT NULL,
  start_date date NOT NULL DEFAULT CURRENT_DATE,
  end_date date NOT NULL,
  status character varying DEFAULT 'active'::character varying CHECK (status::text = ANY (ARRAY['active'::character varying, 'expired'::character varying, 'cancelled'::character varying]::text[])),
  payment_id uuid,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT tbl_memberships_pkey PRIMARY KEY (membership_id),
  CONSTRAINT tbl_memberships_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT tbl_memberships_fitness_id_fkey FOREIGN KEY (fitness_id) REFERENCES public.tbl_fitness(fit_id),
  CONSTRAINT tbl_memberships_payment_id_fkey FOREIGN KEY (payment_id) REFERENCES public.payments(payment_id)
);
CREATE TABLE public.tbl_owner (
  owner_uid integer NOT NULL DEFAULT nextval('tbl_owner_owner_uid_seq'::regclass),
  owner_name character varying NOT NULL,
  owner_email character varying NOT NULL UNIQUE,
  owner_password character varying NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  auth_user_id uuid,
  CONSTRAINT tbl_owner_pkey PRIMARY KEY (owner_uid)
);
CREATE TABLE public.tbl_partner_transfers (
  transfer_id uuid NOT NULL DEFAULT gen_random_uuid(),
  partner_fitness_id integer NOT NULL,
  payment_id uuid NOT NULL,
  total_amount numeric NOT NULL,
  partner_amount numeric NOT NULL,
  system_amount numeric NOT NULL,
  transfer_status character varying DEFAULT 'pending'::character varying CHECK (transfer_status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])),
  transfer_date timestamp with time zone,
  transfer_reference character varying,
  partner_bank_account character varying,
  partner_bank_name character varying,
  partner_account_name character varying,
  notes text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT tbl_partner_transfers_pkey PRIMARY KEY (transfer_id),
  CONSTRAINT tbl_partner_transfers_partner_fitness_id_fkey FOREIGN KEY (partner_fitness_id) REFERENCES public.tbl_fitness(fit_id),
  CONSTRAINT tbl_partner_transfers_payment_id_fkey FOREIGN KEY (payment_id) REFERENCES public.payments(payment_id)
);
CREATE TABLE public.tbl_promo_claims (
  claim_id bigint NOT NULL DEFAULT nextval('tbl_promo_claims_claim_id_seq'::regclass),
  promo_id bigint,
  promo_code text,
  user_id uuid NOT NULL,
  booking_id text,
  metadata jsonb DEFAULT '{}'::jsonb,
  used_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tbl_promo_claims_pkey PRIMARY KEY (claim_id)
);
CREATE TABLE public.tbl_promotions (
  promotion_id integer NOT NULL DEFAULT nextval('tbl_promotions_promotion_id_seq'::regclass),
  fit_id integer NOT NULL,
  owner_id integer NOT NULL,
  title character varying NOT NULL,
  description text,
  type character varying,
  target_audience character varying,
  start_date date,
  end_date date,
  discount_percentage numeric,
  discount_amount numeric,
  promo_code character varying,
  status character varying,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT tbl_promotions_pkey PRIMARY KEY (promotion_id)
);
CREATE TABLE public.tbl_reviews (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  fitness_id integer NOT NULL,
  rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment text,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT tbl_reviews_pkey PRIMARY KEY (id),
  CONSTRAINT tbl_reviews_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT tbl_reviews_fitness_id_fkey FOREIGN KEY (fitness_id) REFERENCES public.tbl_fitness(fit_id)
);